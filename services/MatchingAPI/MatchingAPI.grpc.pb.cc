// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MatchingAPI.proto

#include "MatchingAPI.pb.h"
#include "MatchingAPI.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MatchingApi {

static const char* MatchApi_method_names[] = {
  "/MatchingApi.MatchApi/getKP",
  "/MatchingApi.MatchApi/getDescByImage",
  "/MatchingApi.MatchApi/getDescByKps",
  "/MatchingApi.MatchApi/getMatch",
  "/MatchingApi.MatchApi/getMatchByImage",
  "/MatchingApi.MatchApi/getTransformParameters",
  "/MatchingApi.MatchApi/getTransformParametersByImage",
};

std::unique_ptr< MatchApi::Stub> MatchApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MatchApi::Stub> stub(new MatchApi::Stub(channel));
  return stub;
}

MatchApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getKP_(MatchApi_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDescByImage_(MatchApi_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDescByKps_(MatchApi_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMatch_(MatchApi_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMatchByImage_(MatchApi_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTransformParameters_(MatchApi_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTransformParametersByImage_(MatchApi_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MatchApi::Stub::getKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::MatchingApi::keypointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getKP_, context, request, response);
}

void MatchApi::Stub::experimental_async::getKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getKP_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getKP(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::keypointResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getKP_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>* MatchApi::Stub::AsyncgetKPRaw(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::keypointResponse>::Create(channel_.get(), cq, rpcmethod_getKP_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>* MatchApi::Stub::PrepareAsyncgetKPRaw(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::keypointResponse>::Create(channel_.get(), cq, rpcmethod_getKP_, context, request, false);
}

::grpc::Status MatchApi::Stub::getDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::MatchingApi::descriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getDescByImage_, context, request, response);
}

void MatchApi::Stub::experimental_async::getDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getDescByImage_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getDescByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getDescByImage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* MatchApi::Stub::AsyncgetDescByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::descriptorResponse>::Create(channel_.get(), cq, rpcmethod_getDescByImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* MatchApi::Stub::PrepareAsyncgetDescByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::descriptorResponse>::Create(channel_.get(), cq, rpcmethod_getDescByImage_, context, request, false);
}

::grpc::Status MatchApi::Stub::getDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::MatchingApi::descriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getDescByKps_, context, request, response);
}

void MatchApi::Stub::experimental_async::getDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getDescByKps_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getDescByKps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getDescByKps_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* MatchApi::Stub::AsyncgetDescByKpsRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::descriptorResponse>::Create(channel_.get(), cq, rpcmethod_getDescByKps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* MatchApi::Stub::PrepareAsyncgetDescByKpsRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::descriptorResponse>::Create(channel_.get(), cq, rpcmethod_getDescByKps_, context, request, false);
}

::grpc::Status MatchApi::Stub::getMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::MatchingApi::matchingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getMatch_, context, request, response);
}

void MatchApi::Stub::experimental_async::getMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getMatch_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getMatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::matchingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getMatch_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>* MatchApi::Stub::AsyncgetMatchRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::matchingResponse>::Create(channel_.get(), cq, rpcmethod_getMatch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>* MatchApi::Stub::PrepareAsyncgetMatchRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::matchingResponse>::Create(channel_.get(), cq, rpcmethod_getMatch_, context, request, false);
}

::grpc::Status MatchApi::Stub::getMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::MatchingApi::matchingByImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getMatchByImage_, context, request, response);
}

void MatchApi::Stub::experimental_async::getMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getMatchByImage_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getMatchByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::matchingByImageResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getMatchByImage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>* MatchApi::Stub::AsyncgetMatchByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::matchingByImageResponse>::Create(channel_.get(), cq, rpcmethod_getMatchByImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>* MatchApi::Stub::PrepareAsyncgetMatchByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::matchingByImageResponse>::Create(channel_.get(), cq, rpcmethod_getMatchByImage_, context, request, false);
}

::grpc::Status MatchApi::Stub::getTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::MatchingApi::transformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTransformParameters_, context, request, response);
}

void MatchApi::Stub::experimental_async::getTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTransformParameters_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getTransformParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTransformParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* MatchApi::Stub::AsyncgetTransformParametersRaw(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::transformResponse>::Create(channel_.get(), cq, rpcmethod_getTransformParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* MatchApi::Stub::PrepareAsyncgetTransformParametersRaw(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::transformResponse>::Create(channel_.get(), cq, rpcmethod_getTransformParameters_, context, request, false);
}

::grpc::Status MatchApi::Stub::getTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::MatchingApi::transformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTransformParametersByImage_, context, request, response);
}

void MatchApi::Stub::experimental_async::getTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTransformParametersByImage_, context, request, response, std::move(f));
}

void MatchApi::Stub::experimental_async::getTransformParametersByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTransformParametersByImage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* MatchApi::Stub::AsyncgetTransformParametersByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::transformResponse>::Create(channel_.get(), cq, rpcmethod_getTransformParametersByImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* MatchApi::Stub::PrepareAsyncgetTransformParametersByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MatchingApi::transformResponse>::Create(channel_.get(), cq, rpcmethod_getTransformParametersByImage_, context, request, false);
}

MatchApi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::keypointRequest, ::MatchingApi::keypointResponse>(
          std::mem_fn(&MatchApi::Service::getKP), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::descriptorRequest, ::MatchingApi::descriptorResponse>(
          std::mem_fn(&MatchApi::Service::getDescByImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::descriptorByKpsRequest, ::MatchingApi::descriptorResponse>(
          std::mem_fn(&MatchApi::Service::getDescByKps), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::matchingRequest, ::MatchingApi::matchingResponse>(
          std::mem_fn(&MatchApi::Service::getMatch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::matchingByImageRequest, ::MatchingApi::matchingByImageResponse>(
          std::mem_fn(&MatchApi::Service::getMatchByImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::transformRequest, ::MatchingApi::transformResponse>(
          std::mem_fn(&MatchApi::Service::getTransformParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchApi_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchApi::Service, ::MatchingApi::transformByImageRequest, ::MatchingApi::transformResponse>(
          std::mem_fn(&MatchApi::Service::getTransformParametersByImage), this)));
}

MatchApi::Service::~Service() {
}

::grpc::Status MatchApi::Service::getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchApi::Service::getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchApi::Service::getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchApi::Service::getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchApi::Service::getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchApi::Service::getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchApi::Service::getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MatchingApi

