// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MatchingAPI.proto
#ifndef GRPC_MatchingAPI_2eproto__INCLUDED
#define GRPC_MatchingAPI_2eproto__INCLUDED

#include "MatchingAPI.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace MatchingApi {

class MatchApi final {
 public:
  static constexpr char const* service_full_name() {
    return "MatchingApi.MatchApi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::MatchingApi::keypointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::keypointResponse>> AsyncgetKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::keypointResponse>>(AsyncgetKPRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::keypointResponse>> PrepareAsyncgetKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::keypointResponse>>(PrepareAsyncgetKPRaw(context, request, cq));
    }
    virtual ::grpc::Status getDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::MatchingApi::descriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>> AsyncgetDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>>(AsyncgetDescByImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>> PrepareAsyncgetDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>>(PrepareAsyncgetDescByImageRaw(context, request, cq));
    }
    virtual ::grpc::Status getDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::MatchingApi::descriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>> AsyncgetDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>>(AsyncgetDescByKpsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>> PrepareAsyncgetDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>>(PrepareAsyncgetDescByKpsRaw(context, request, cq));
    }
    virtual ::grpc::Status getMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::MatchingApi::matchingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingResponse>> AsyncgetMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingResponse>>(AsyncgetMatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingResponse>> PrepareAsyncgetMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingResponse>>(PrepareAsyncgetMatchRaw(context, request, cq));
    }
    virtual ::grpc::Status getMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::MatchingApi::matchingByImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingByImageResponse>> AsyncgetMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingByImageResponse>>(AsyncgetMatchByImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingByImageResponse>> PrepareAsyncgetMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingByImageResponse>>(PrepareAsyncgetMatchByImageRaw(context, request, cq));
    }
    virtual ::grpc::Status getTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::MatchingApi::transformResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>> AsyncgetTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>>(AsyncgetTransformParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>> PrepareAsyncgetTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>>(PrepareAsyncgetTransformParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::MatchingApi::transformResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>> AsyncgetTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>>(AsyncgetTransformParametersByImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>> PrepareAsyncgetTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>>(PrepareAsyncgetTransformParametersByImageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getKP(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::keypointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDescByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDescByKps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::matchingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMatchByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::matchingByImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTransformParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTransformParametersByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::keypointResponse>* AsyncgetKPRaw(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::keypointResponse>* PrepareAsyncgetKPRaw(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>* AsyncgetDescByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>* PrepareAsyncgetDescByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>* AsyncgetDescByKpsRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::descriptorResponse>* PrepareAsyncgetDescByKpsRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingResponse>* AsyncgetMatchRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingResponse>* PrepareAsyncgetMatchRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingByImageResponse>* AsyncgetMatchByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::matchingByImageResponse>* PrepareAsyncgetMatchByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>* AsyncgetTransformParametersRaw(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>* PrepareAsyncgetTransformParametersRaw(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>* AsyncgetTransformParametersByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MatchingApi::transformResponse>* PrepareAsyncgetTransformParametersByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::MatchingApi::keypointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>> AsyncgetKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>>(AsyncgetKPRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>> PrepareAsyncgetKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>>(PrepareAsyncgetKPRaw(context, request, cq));
    }
    ::grpc::Status getDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::MatchingApi::descriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>> AsyncgetDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>>(AsyncgetDescByImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>> PrepareAsyncgetDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>>(PrepareAsyncgetDescByImageRaw(context, request, cq));
    }
    ::grpc::Status getDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::MatchingApi::descriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>> AsyncgetDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>>(AsyncgetDescByKpsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>> PrepareAsyncgetDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>>(PrepareAsyncgetDescByKpsRaw(context, request, cq));
    }
    ::grpc::Status getMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::MatchingApi::matchingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>> AsyncgetMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>>(AsyncgetMatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>> PrepareAsyncgetMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>>(PrepareAsyncgetMatchRaw(context, request, cq));
    }
    ::grpc::Status getMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::MatchingApi::matchingByImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>> AsyncgetMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>>(AsyncgetMatchByImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>> PrepareAsyncgetMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>>(PrepareAsyncgetMatchByImageRaw(context, request, cq));
    }
    ::grpc::Status getTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::MatchingApi::transformResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>> AsyncgetTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>>(AsyncgetTransformParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>> PrepareAsyncgetTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>>(PrepareAsyncgetTransformParametersRaw(context, request, cq));
    }
    ::grpc::Status getTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::MatchingApi::transformResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>> AsyncgetTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>>(AsyncgetTransformParametersByImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>> PrepareAsyncgetTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>>(PrepareAsyncgetTransformParametersByImageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getKP(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response, std::function<void(::grpc::Status)>) override;
      void getKP(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::keypointResponse* response, std::function<void(::grpc::Status)>) override;
      void getDescByImage(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void getDescByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void getDescByKps(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void getDescByKps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::descriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void getMatch(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response, std::function<void(::grpc::Status)>) override;
      void getMatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::matchingResponse* response, std::function<void(::grpc::Status)>) override;
      void getMatchByImage(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response, std::function<void(::grpc::Status)>) override;
      void getMatchByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::matchingByImageResponse* response, std::function<void(::grpc::Status)>) override;
      void getTransformParameters(::grpc::ClientContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) override;
      void getTransformParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) override;
      void getTransformParametersByImage(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) override;
      void getTransformParametersByImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MatchingApi::transformResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>* AsyncgetKPRaw(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::keypointResponse>* PrepareAsyncgetKPRaw(::grpc::ClientContext* context, const ::MatchingApi::keypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* AsyncgetDescByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* PrepareAsyncgetDescByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* AsyncgetDescByKpsRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::descriptorResponse>* PrepareAsyncgetDescByKpsRaw(::grpc::ClientContext* context, const ::MatchingApi::descriptorByKpsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>* AsyncgetMatchRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingResponse>* PrepareAsyncgetMatchRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>* AsyncgetMatchByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::matchingByImageResponse>* PrepareAsyncgetMatchByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::matchingByImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* AsyncgetTransformParametersRaw(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* PrepareAsyncgetTransformParametersRaw(::grpc::ClientContext* context, const ::MatchingApi::transformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* AsyncgetTransformParametersByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MatchingApi::transformResponse>* PrepareAsyncgetTransformParametersByImageRaw(::grpc::ClientContext* context, const ::MatchingApi::transformByImageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getKP_;
    const ::grpc::internal::RpcMethod rpcmethod_getDescByImage_;
    const ::grpc::internal::RpcMethod rpcmethod_getDescByKps_;
    const ::grpc::internal::RpcMethod rpcmethod_getMatch_;
    const ::grpc::internal::RpcMethod rpcmethod_getMatchByImage_;
    const ::grpc::internal::RpcMethod rpcmethod_getTransformParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getTransformParametersByImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response);
    virtual ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response);
    virtual ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response);
    virtual ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response);
    virtual ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response);
    virtual ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response);
    virtual ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getKP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getKP() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getKP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKP(::grpc::ServerContext* context, ::MatchingApi::keypointRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::keypointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDescByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getDescByImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getDescByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescByImage(::grpc::ServerContext* context, ::MatchingApi::descriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::descriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDescByKps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getDescByKps() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getDescByKps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescByKps(::grpc::ServerContext* context, ::MatchingApi::descriptorByKpsRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::descriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getMatch() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMatch(::grpc::ServerContext* context, ::MatchingApi::matchingRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::matchingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMatchByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getMatchByImage() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getMatchByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMatchByImage(::grpc::ServerContext* context, ::MatchingApi::matchingByImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::matchingByImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTransformParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getTransformParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getTransformParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransformParameters(::grpc::ServerContext* context, ::MatchingApi::transformRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::transformResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTransformParametersByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getTransformParametersByImage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getTransformParametersByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransformParametersByImage(::grpc::ServerContext* context, ::MatchingApi::transformByImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::MatchingApi::transformResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getKP<WithAsyncMethod_getDescByImage<WithAsyncMethod_getDescByKps<WithAsyncMethod_getMatch<WithAsyncMethod_getMatchByImage<WithAsyncMethod_getTransformParameters<WithAsyncMethod_getTransformParametersByImage<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getKP() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::keypointRequest, ::MatchingApi::keypointResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::keypointRequest* request,
                 ::MatchingApi::keypointResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getKP(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getKP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDescByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getDescByImage() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::descriptorRequest, ::MatchingApi::descriptorResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::descriptorRequest* request,
                 ::MatchingApi::descriptorResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getDescByImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getDescByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDescByKps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getDescByKps() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::descriptorByKpsRequest, ::MatchingApi::descriptorResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::descriptorByKpsRequest* request,
                 ::MatchingApi::descriptorResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getDescByKps(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getDescByKps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getMatch() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::matchingRequest, ::MatchingApi::matchingResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::matchingRequest* request,
                 ::MatchingApi::matchingResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getMatch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMatchByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getMatchByImage() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::matchingByImageRequest, ::MatchingApi::matchingByImageResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::matchingByImageRequest* request,
                 ::MatchingApi::matchingByImageResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getMatchByImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getMatchByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getTransformParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getTransformParameters() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::transformRequest, ::MatchingApi::transformResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::transformRequest* request,
                 ::MatchingApi::transformResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getTransformParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getTransformParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getTransformParametersByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getTransformParametersByImage() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::MatchingApi::transformByImageRequest, ::MatchingApi::transformResponse>(
          [this](::grpc::ServerContext* context,
                 const ::MatchingApi::transformByImageRequest* request,
                 ::MatchingApi::transformResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getTransformParametersByImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getTransformParametersByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getKP<ExperimentalWithCallbackMethod_getDescByImage<ExperimentalWithCallbackMethod_getDescByKps<ExperimentalWithCallbackMethod_getMatch<ExperimentalWithCallbackMethod_getMatchByImage<ExperimentalWithCallbackMethod_getTransformParameters<ExperimentalWithCallbackMethod_getTransformParametersByImage<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getKP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getKP() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getKP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDescByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getDescByImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getDescByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDescByKps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getDescByKps() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getDescByKps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getMatch() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMatchByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getMatchByImage() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getMatchByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTransformParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getTransformParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getTransformParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTransformParametersByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getTransformParametersByImage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getTransformParametersByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getKP() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getKP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKP(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDescByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getDescByImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getDescByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescByImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDescByKps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getDescByKps() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getDescByKps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescByKps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getMatch() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMatchByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getMatchByImage() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getMatchByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMatchByImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTransformParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getTransformParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getTransformParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransformParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTransformParametersByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getTransformParametersByImage() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getTransformParametersByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransformParametersByImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getKP() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getKP(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getKP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getKP(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDescByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getDescByImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDescByImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getDescByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDescByImage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDescByKps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getDescByKps() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDescByKps(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getDescByKps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDescByKps(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getMatch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMatch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMatch(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMatchByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getMatchByImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMatchByImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getMatchByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMatchByImage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getTransformParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getTransformParameters() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getTransformParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getTransformParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getTransformParameters(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getTransformParametersByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getTransformParametersByImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getTransformParametersByImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getTransformParametersByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getTransformParametersByImage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getKP() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::keypointRequest, ::MatchingApi::keypointResponse>(std::bind(&WithStreamedUnaryMethod_getKP<BaseClass>::StreamedgetKP, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getKP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKP(::grpc::ServerContext* context, const ::MatchingApi::keypointRequest* request, ::MatchingApi::keypointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKP(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::keypointRequest,::MatchingApi::keypointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDescByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getDescByImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::descriptorRequest, ::MatchingApi::descriptorResponse>(std::bind(&WithStreamedUnaryMethod_getDescByImage<BaseClass>::StreamedgetDescByImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getDescByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDescByImage(::grpc::ServerContext* context, const ::MatchingApi::descriptorRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDescByImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::descriptorRequest,::MatchingApi::descriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDescByKps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getDescByKps() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::descriptorByKpsRequest, ::MatchingApi::descriptorResponse>(std::bind(&WithStreamedUnaryMethod_getDescByKps<BaseClass>::StreamedgetDescByKps, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getDescByKps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDescByKps(::grpc::ServerContext* context, const ::MatchingApi::descriptorByKpsRequest* request, ::MatchingApi::descriptorResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDescByKps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::descriptorByKpsRequest,::MatchingApi::descriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getMatch() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::matchingRequest, ::MatchingApi::matchingResponse>(std::bind(&WithStreamedUnaryMethod_getMatch<BaseClass>::StreamedgetMatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMatch(::grpc::ServerContext* context, const ::MatchingApi::matchingRequest* request, ::MatchingApi::matchingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::matchingRequest,::MatchingApi::matchingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMatchByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getMatchByImage() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::matchingByImageRequest, ::MatchingApi::matchingByImageResponse>(std::bind(&WithStreamedUnaryMethod_getMatchByImage<BaseClass>::StreamedgetMatchByImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getMatchByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMatchByImage(::grpc::ServerContext* context, const ::MatchingApi::matchingByImageRequest* request, ::MatchingApi::matchingByImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMatchByImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::matchingByImageRequest,::MatchingApi::matchingByImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTransformParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getTransformParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::transformRequest, ::MatchingApi::transformResponse>(std::bind(&WithStreamedUnaryMethod_getTransformParameters<BaseClass>::StreamedgetTransformParameters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getTransformParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTransformParameters(::grpc::ServerContext* context, const ::MatchingApi::transformRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTransformParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::transformRequest,::MatchingApi::transformResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTransformParametersByImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getTransformParametersByImage() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::MatchingApi::transformByImageRequest, ::MatchingApi::transformResponse>(std::bind(&WithStreamedUnaryMethod_getTransformParametersByImage<BaseClass>::StreamedgetTransformParametersByImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getTransformParametersByImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTransformParametersByImage(::grpc::ServerContext* context, const ::MatchingApi::transformByImageRequest* request, ::MatchingApi::transformResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTransformParametersByImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MatchingApi::transformByImageRequest,::MatchingApi::transformResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getKP<WithStreamedUnaryMethod_getDescByImage<WithStreamedUnaryMethod_getDescByKps<WithStreamedUnaryMethod_getMatch<WithStreamedUnaryMethod_getMatchByImage<WithStreamedUnaryMethod_getTransformParameters<WithStreamedUnaryMethod_getTransformParametersByImage<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getKP<WithStreamedUnaryMethod_getDescByImage<WithStreamedUnaryMethod_getDescByKps<WithStreamedUnaryMethod_getMatch<WithStreamedUnaryMethod_getMatchByImage<WithStreamedUnaryMethod_getTransformParameters<WithStreamedUnaryMethod_getTransformParametersByImage<Service > > > > > > > StreamedService;
};

}  // namespace MatchingApi


#endif  // GRPC_MatchingAPI_2eproto__INCLUDED
