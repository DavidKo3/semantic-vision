// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchingAPI.proto

#include "MatchingAPI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_MatchingAPI_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_keyPoint_MatchingAPI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MatchingAPI_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_matchedPoint_MatchingAPI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MatchingAPI_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_oneDescriptor_MatchingAPI_2eproto;
namespace MatchingApi {
class keyPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<keyPoint> _instance;
} _keyPoint_default_instance_;
class keypointRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<keypointRequest> _instance;
} _keypointRequest_default_instance_;
class keypointResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<keypointResponse> _instance;
} _keypointResponse_default_instance_;
class oneDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<oneDescriptor> _instance;
} _oneDescriptor_default_instance_;
class descriptorRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<descriptorRequest> _instance;
} _descriptorRequest_default_instance_;
class descriptorResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<descriptorResponse> _instance;
} _descriptorResponse_default_instance_;
class matchingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<matchingRequest> _instance;
} _matchingRequest_default_instance_;
class matchedPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<matchedPoint> _instance;
} _matchedPoint_default_instance_;
class matchingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<matchingResponse> _instance;
} _matchingResponse_default_instance_;
class descriptorByKpsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<descriptorByKpsRequest> _instance;
} _descriptorByKpsRequest_default_instance_;
class matchingByImageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<matchingByImageRequest> _instance;
} _matchingByImageRequest_default_instance_;
class matchingByImageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<matchingByImageResponse> _instance;
} _matchingByImageResponse_default_instance_;
class transformRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<transformRequest> _instance;
} _transformRequest_default_instance_;
class transformResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<transformResponse> _instance;
} _transformResponse_default_instance_;
class transformByImageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<transformByImageRequest> _instance;
} _transformByImageRequest_default_instance_;
}  // namespace MatchingApi
static void InitDefaultskeyPoint_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_keyPoint_default_instance_;
    new (ptr) ::MatchingApi::keyPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::keyPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_keyPoint_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultskeyPoint_MatchingAPI_2eproto}, {}};

static void InitDefaultskeypointRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_keypointRequest_default_instance_;
    new (ptr) ::MatchingApi::keypointRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::keypointRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_keypointRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultskeypointRequest_MatchingAPI_2eproto}, {}};

static void InitDefaultskeypointResponse_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_keypointResponse_default_instance_;
    new (ptr) ::MatchingApi::keypointResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::keypointResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_keypointResponse_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultskeypointResponse_MatchingAPI_2eproto}, {
      &scc_info_keyPoint_MatchingAPI_2eproto.base,}};

static void InitDefaultsoneDescriptor_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_oneDescriptor_default_instance_;
    new (ptr) ::MatchingApi::oneDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::oneDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_oneDescriptor_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsoneDescriptor_MatchingAPI_2eproto}, {}};

static void InitDefaultsdescriptorRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_descriptorRequest_default_instance_;
    new (ptr) ::MatchingApi::descriptorRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::descriptorRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_descriptorRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdescriptorRequest_MatchingAPI_2eproto}, {}};

static void InitDefaultsdescriptorResponse_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_descriptorResponse_default_instance_;
    new (ptr) ::MatchingApi::descriptorResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::descriptorResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_descriptorResponse_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsdescriptorResponse_MatchingAPI_2eproto}, {
      &scc_info_oneDescriptor_MatchingAPI_2eproto.base,
      &scc_info_keyPoint_MatchingAPI_2eproto.base,}};

static void InitDefaultsmatchingRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_matchingRequest_default_instance_;
    new (ptr) ::MatchingApi::matchingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::matchingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_matchingRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmatchingRequest_MatchingAPI_2eproto}, {
      &scc_info_oneDescriptor_MatchingAPI_2eproto.base,}};

static void InitDefaultsmatchedPoint_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_matchedPoint_default_instance_;
    new (ptr) ::MatchingApi::matchedPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::matchedPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_matchedPoint_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmatchedPoint_MatchingAPI_2eproto}, {}};

static void InitDefaultsmatchingResponse_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_matchingResponse_default_instance_;
    new (ptr) ::MatchingApi::matchingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::matchingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_matchingResponse_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmatchingResponse_MatchingAPI_2eproto}, {
      &scc_info_matchedPoint_MatchingAPI_2eproto.base,}};

static void InitDefaultsdescriptorByKpsRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_descriptorByKpsRequest_default_instance_;
    new (ptr) ::MatchingApi::descriptorByKpsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::descriptorByKpsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_descriptorByKpsRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsdescriptorByKpsRequest_MatchingAPI_2eproto}, {
      &scc_info_keyPoint_MatchingAPI_2eproto.base,}};

static void InitDefaultsmatchingByImageRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_matchingByImageRequest_default_instance_;
    new (ptr) ::MatchingApi::matchingByImageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::matchingByImageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_matchingByImageRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmatchingByImageRequest_MatchingAPI_2eproto}, {}};

static void InitDefaultsmatchingByImageResponse_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_matchingByImageResponse_default_instance_;
    new (ptr) ::MatchingApi::matchingByImageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::matchingByImageResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_matchingByImageResponse_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsmatchingByImageResponse_MatchingAPI_2eproto}, {
      &scc_info_matchedPoint_MatchingAPI_2eproto.base,
      &scc_info_keyPoint_MatchingAPI_2eproto.base,}};

static void InitDefaultstransformRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_transformRequest_default_instance_;
    new (ptr) ::MatchingApi::transformRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::transformRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_transformRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultstransformRequest_MatchingAPI_2eproto}, {
      &scc_info_matchedPoint_MatchingAPI_2eproto.base,
      &scc_info_keyPoint_MatchingAPI_2eproto.base,}};

static void InitDefaultstransformResponse_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_transformResponse_default_instance_;
    new (ptr) ::MatchingApi::transformResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::transformResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_transformResponse_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstransformResponse_MatchingAPI_2eproto}, {}};

static void InitDefaultstransformByImageRequest_MatchingAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MatchingApi::_transformByImageRequest_default_instance_;
    new (ptr) ::MatchingApi::transformByImageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchingApi::transformByImageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_transformByImageRequest_MatchingAPI_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstransformByImageRequest_MatchingAPI_2eproto}, {}};

void InitDefaults_MatchingAPI_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_keyPoint_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_keypointRequest_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_keypointResponse_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_oneDescriptor_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_descriptorRequest_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_descriptorResponse_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_matchingRequest_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_matchedPoint_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_matchingResponse_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_descriptorByKpsRequest_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_matchingByImageRequest_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_matchingByImageResponse_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_transformRequest_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_transformResponse_MatchingAPI_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_transformByImageRequest_MatchingAPI_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_MatchingAPI_2eproto[15];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_MatchingAPI_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_MatchingAPI_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_MatchingAPI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, size_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, angle_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, x_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, y_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, response_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, octave_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keyPoint, class_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointRequest, image_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointRequest, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointResponse, keypoints_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::keypointResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::oneDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::oneDescriptor, onedescf_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::oneDescriptor, onedescu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorRequest, image_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorRequest, descriptor_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorRequest, desc_parameters_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorRequest, det_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorResponse, features_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorResponse, keypoints_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingRequest, features_first_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingRequest, features_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchedPoint, queryidx_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchedPoint, trainidx_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchedPoint, imgidx_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchedPoint, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingResponse, all_matches_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorByKpsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorByKpsRequest, image_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorByKpsRequest, descriptor_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorByKpsRequest, desc_parameters_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::descriptorByKpsRequest, keypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, image_first_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, image_second_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, descriptor_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, desc_parameters_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageRequest, det_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageResponse, all_matches_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageResponse, keypoints_first_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::matchingByImageResponse, keypoints_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformRequest, all_matches_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformRequest, transform_type_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformRequest, keypoints_first_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformRequest, keypoints_second_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformRequest, transform_input_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformResponse, status_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformResponse, transform_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, image_first_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, image_second_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, descriptor_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, desc_parameters_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, det_parameters_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, transform_type_),
  PROTOBUF_FIELD_OFFSET(::MatchingApi::transformByImageRequest, transform_input_parameters_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MatchingApi::keyPoint)},
  { 12, -1, sizeof(::MatchingApi::keypointRequest)},
  { 20, -1, sizeof(::MatchingApi::keypointResponse)},
  { 27, -1, sizeof(::MatchingApi::oneDescriptor)},
  { 34, -1, sizeof(::MatchingApi::descriptorRequest)},
  { 44, -1, sizeof(::MatchingApi::descriptorResponse)},
  { 52, -1, sizeof(::MatchingApi::matchingRequest)},
  { 59, -1, sizeof(::MatchingApi::matchedPoint)},
  { 68, -1, sizeof(::MatchingApi::matchingResponse)},
  { 75, -1, sizeof(::MatchingApi::descriptorByKpsRequest)},
  { 84, -1, sizeof(::MatchingApi::matchingByImageRequest)},
  { 95, -1, sizeof(::MatchingApi::matchingByImageResponse)},
  { 104, -1, sizeof(::MatchingApi::transformRequest)},
  { 114, -1, sizeof(::MatchingApi::transformResponse)},
  { 121, -1, sizeof(::MatchingApi::transformByImageRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_keyPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_keypointRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_keypointResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_oneDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_descriptorRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_descriptorResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_matchingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_matchedPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_matchingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_descriptorByKpsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_matchingByImageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_matchingByImageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_transformRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_transformResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MatchingApi::_transformByImageRequest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_MatchingAPI_2eproto = {
  {}, AddDescriptors_MatchingAPI_2eproto, "MatchingAPI.proto", schemas,
  file_default_instances, TableStruct_MatchingAPI_2eproto::offsets,
  file_level_metadata_MatchingAPI_2eproto, 15, file_level_enum_descriptors_MatchingAPI_2eproto, file_level_service_descriptors_MatchingAPI_2eproto,
};

const char descriptor_table_protodef_MatchingAPI_2eproto[] =
  "\n\021MatchingAPI.proto\022\013MatchingApi\"q\n\010keyP"
  "oint\022\014\n\004size\030\001 \001(\002\022\r\n\005angle\030\002 \001(\002\022\t\n\001x\030\003"
  " \001(\002\022\t\n\001y\030\004 \001(\002\022\020\n\010response\030\005 \001(\002\022\016\n\006oct"
  "ave\030\006 \001(\005\022\020\n\010class_id\030\007 \001(\005\"K\n\017keypointR"
  "equest\022\r\n\005image\030\001 \001(\014\022\025\n\rdetector_name\030\002"
  " \001(\t\022\022\n\nparameters\030\003 \001(\t\"L\n\020keypointResp"
  "onse\022(\n\tkeypoints\030\001 \003(\0132\025.MatchingApi.ke"
  "yPoint\022\016\n\006status\030\002 \001(\t\"3\n\roneDescriptor\022"
  "\020\n\010onedescF\030\001 \003(\002\022\020\n\010onedescU\030\002 \003(\005\"\203\001\n\021"
  "descriptorRequest\022\r\n\005image\030\001 \001(\014\022\027\n\017desc"
  "riptor_name\030\002 \001(\t\022\027\n\017desc_parameters\030\003 \001"
  "(\t\022\025\n\rdetector_name\030\004 \001(\t\022\026\n\016det_paramet"
  "ers\030\005 \001(\t\"|\n\022descriptorResponse\022,\n\010featu"
  "res\030\001 \003(\0132\032.MatchingApi.oneDescriptor\022(\n"
  "\tkeypoints\030\003 \003(\0132\025.MatchingApi.keyPoint\022"
  "\016\n\006status\030\002 \001(\t\"z\n\017matchingRequest\0222\n\016fe"
  "atures_first\030\001 \003(\0132\032.MatchingApi.oneDesc"
  "riptor\0223\n\017features_second\030\002 \003(\0132\032.Matchi"
  "ngApi.oneDescriptor\"T\n\014matchedPoint\022\020\n\010q"
  "ueryIdx\030\001 \001(\005\022\020\n\010trainIdx\030\002 \001(\005\022\016\n\006imgId"
  "x\030\003 \001(\005\022\020\n\010distance\030\004 \001(\002\"R\n\020matchingRes"
  "ponse\022.\n\013all_matches\030\001 \003(\0132\031.MatchingApi"
  ".matchedPoint\022\016\n\006status\030\002 \001(\t\"\203\001\n\026descri"
  "ptorByKpsRequest\022\r\n\005image\030\004 \001(\014\022\027\n\017descr"
  "iptor_name\030\001 \001(\t\022\027\n\017desc_parameters\030\002 \001("
  "\t\022(\n\tkeypoints\030\003 \003(\0132\025.MatchingApi.keyPo"
  "int\"\244\001\n\026matchingByImageRequest\022\023\n\013image_"
  "first\030\001 \001(\014\022\024\n\014image_second\030\002 \001(\014\022\027\n\017des"
  "criptor_name\030\003 \001(\t\022\027\n\017desc_parameters\030\004 "
  "\001(\t\022\025\n\rdetector_name\030\005 \001(\t\022\026\n\016det_parame"
  "ters\030\006 \001(\t\"\272\001\n\027matchingByImageResponse\022."
  "\n\013all_matches\030\001 \003(\0132\031.MatchingApi.matche"
  "dPoint\022\016\n\006status\030\002 \001(\t\022.\n\017keypoints_firs"
  "t\030\003 \003(\0132\025.MatchingApi.keyPoint\022/\n\020keypoi"
  "nts_second\030\004 \003(\0132\025.MatchingApi.keyPoint\""
  "\337\001\n\020transformRequest\022.\n\013all_matches\030\001 \003("
  "\0132\031.MatchingApi.matchedPoint\022\026\n\016transfor"
  "m_type\030\002 \001(\t\022.\n\017keypoints_first\030\003 \003(\0132\025."
  "MatchingApi.keyPoint\022/\n\020keypoints_second"
  "\030\004 \003(\0132\025.MatchingApi.keyPoint\022\"\n\032transfo"
  "rm_input_parameters\030\005 \001(\t\"A\n\021transformRe"
  "sponse\022\016\n\006status\030\001 \001(\t\022\034\n\024transform_para"
  "meters\030\002 \003(\001\"\341\001\n\027transformByImageRequest"
  "\022\023\n\013image_first\030\001 \001(\014\022\024\n\014image_second\030\002 "
  "\001(\014\022\027\n\017descriptor_name\030\003 \001(\t\022\027\n\017desc_par"
  "ameters\030\004 \001(\t\022\025\n\rdetector_name\030\005 \001(\t\022\026\n\016"
  "det_parameters\030\006 \001(\t\022\026\n\016transform_type\030\007"
  " \001(\t\022\"\n\032transform_input_parameters\030\010 \001(\t"
  "2\356\004\n\010MatchApi\022F\n\005getKP\022\034.MatchingApi.key"
  "pointRequest\032\035.MatchingApi.keypointRespo"
  "nse\"\000\022S\n\016getDescByImage\022\036.MatchingApi.de"
  "scriptorRequest\032\037.MatchingApi.descriptor"
  "Response\"\000\022V\n\014getDescByKps\022#.MatchingApi"
  ".descriptorByKpsRequest\032\037.MatchingApi.de"
  "scriptorResponse\"\000\022I\n\010getMatch\022\034.Matchin"
  "gApi.matchingRequest\032\035.MatchingApi.match"
  "ingResponse\"\000\022^\n\017getMatchByImage\022#.Match"
  "ingApi.matchingByImageRequest\032$.Matching"
  "Api.matchingByImageResponse\"\000\022Y\n\026getTran"
  "sformParameters\022\035.MatchingApi.transformR"
  "equest\032\036.MatchingApi.transformResponse\"\000"
  "\022g\n\035getTransformParametersByImage\022$.Matc"
  "hingApi.transformByImageRequest\032\036.Matchi"
  "ngApi.transformResponse\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_MatchingAPI_2eproto = {
  false, InitDefaults_MatchingAPI_2eproto, 
  descriptor_table_protodef_MatchingAPI_2eproto,
  "MatchingAPI.proto", &assign_descriptors_table_MatchingAPI_2eproto, 2553,
};

void AddDescriptors_MatchingAPI_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_MatchingAPI_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MatchingAPI_2eproto = []() { AddDescriptors_MatchingAPI_2eproto(); return true; }();
namespace MatchingApi {

// ===================================================================

void keyPoint::InitAsDefaultInstance() {
}
class keyPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int keyPoint::kSizeFieldNumber;
const int keyPoint::kAngleFieldNumber;
const int keyPoint::kXFieldNumber;
const int keyPoint::kYFieldNumber;
const int keyPoint::kResponseFieldNumber;
const int keyPoint::kOctaveFieldNumber;
const int keyPoint::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

keyPoint::keyPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.keyPoint)
}
keyPoint::keyPoint(const keyPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&class_id_) -
    reinterpret_cast<char*>(&size_)) + sizeof(class_id_));
  // @@protoc_insertion_point(copy_constructor:MatchingApi.keyPoint)
}

void keyPoint::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_id_) -
      reinterpret_cast<char*>(&size_)) + sizeof(class_id_));
}

keyPoint::~keyPoint() {
  // @@protoc_insertion_point(destructor:MatchingApi.keyPoint)
  SharedDtor();
}

void keyPoint::SharedDtor() {
}

void keyPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const keyPoint& keyPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_keyPoint_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void keyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.keyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_id_) -
      reinterpret_cast<char*>(&size_)) + sizeof(class_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* keyPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<keyPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float size = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_size(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float angle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_angle(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float response = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_response(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 octave = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_octave(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 class_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_class_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool keyPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.keyPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 octave = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 class_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.keyPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.keyPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void keyPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.keyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->size(), output);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // float response = 5;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->response(), output);
  }

  // int32 octave = 6;
  if (this->octave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->octave(), output);
  }

  // int32 class_id = 7;
  if (this->class_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->class_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.keyPoint)
}

::google::protobuf::uint8* keyPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.keyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->size(), target);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // float x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // float y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // float response = 5;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->response(), target);
  }

  // int32 octave = 6;
  if (this->octave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->octave(), target);
  }

  // int32 class_id = 7;
  if (this->class_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->class_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.keyPoint)
  return target;
}

size_t keyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.keyPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float size = 1;
  if (this->size() != 0) {
    total_size += 1 + 4;
  }

  // float angle = 2;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float response = 5;
  if (this->response() != 0) {
    total_size += 1 + 4;
  }

  // int32 octave = 6;
  if (this->octave() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->octave());
  }

  // int32 class_id = 7;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->class_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void keyPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.keyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const keyPoint* source =
      ::google::protobuf::DynamicCastToGenerated<keyPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.keyPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.keyPoint)
    MergeFrom(*source);
  }
}

void keyPoint::MergeFrom(const keyPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.keyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.response() != 0) {
    set_response(from.response());
  }
  if (from.octave() != 0) {
    set_octave(from.octave());
  }
  if (from.class_id() != 0) {
    set_class_id(from.class_id());
  }
}

void keyPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.keyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keyPoint::CopyFrom(const keyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.keyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keyPoint::IsInitialized() const {
  return true;
}

void keyPoint::Swap(keyPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void keyPoint::InternalSwap(keyPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(size_, other->size_);
  swap(angle_, other->angle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(response_, other->response_);
  swap(octave_, other->octave_);
  swap(class_id_, other->class_id_);
}

::google::protobuf::Metadata keyPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void keypointRequest::InitAsDefaultInstance() {
}
class keypointRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int keypointRequest::kImageFieldNumber;
const int keypointRequest::kDetectorNameFieldNumber;
const int keypointRequest::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

keypointRequest::keypointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.keypointRequest)
}
keypointRequest::keypointRequest(const keypointRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detector_name().size() > 0) {
    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parameters().size() > 0) {
    parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.keypointRequest)
}

void keypointRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_keypointRequest_MatchingAPI_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

keypointRequest::~keypointRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.keypointRequest)
  SharedDtor();
}

void keypointRequest::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void keypointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const keypointRequest& keypointRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_keypointRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void keypointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.keypointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* keypointRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<keypointRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string detector_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.keypointRequest.detector_name");
        object = msg->mutable_detector_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string parameters = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.keypointRequest.parameters");
        object = msg->mutable_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool keypointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.keypointRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detector_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detector_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detector_name().data(), static_cast<int>(this->detector_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.keypointRequest.detector_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parameters().data(), static_cast<int>(this->parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.keypointRequest.parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.keypointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.keypointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void keypointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.keypointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // string detector_name = 2;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.keypointRequest.detector_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->detector_name(), output);
  }

  // string parameters = 3;
  if (this->parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameters().data(), static_cast<int>(this->parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.keypointRequest.parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.keypointRequest)
}

::google::protobuf::uint8* keypointRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.keypointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // string detector_name = 2;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.keypointRequest.detector_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->detector_name(), target);
  }

  // string parameters = 3;
  if (this->parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameters().data(), static_cast<int>(this->parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.keypointRequest.parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.keypointRequest)
  return target;
}

size_t keypointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.keypointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  // string detector_name = 2;
  if (this->detector_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detector_name());
  }

  // string parameters = 3;
  if (this->parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parameters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void keypointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.keypointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const keypointRequest* source =
      ::google::protobuf::DynamicCastToGenerated<keypointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.keypointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.keypointRequest)
    MergeFrom(*source);
  }
}

void keypointRequest::MergeFrom(const keypointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.keypointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.detector_name().size() > 0) {

    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  if (from.parameters().size() > 0) {

    parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_);
  }
}

void keypointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.keypointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keypointRequest::CopyFrom(const keypointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.keypointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keypointRequest::IsInitialized() const {
  return true;
}

void keypointRequest::Swap(keypointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void keypointRequest::InternalSwap(keypointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_name_.Swap(&other->detector_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parameters_.Swap(&other->parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata keypointRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void keypointResponse::InitAsDefaultInstance() {
}
class keypointResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int keypointResponse::kKeypointsFieldNumber;
const int keypointResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

keypointResponse::keypointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.keypointResponse)
}
keypointResponse::keypointResponse(const keypointResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keypoints_(from.keypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.keypointResponse)
}

void keypointResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_keypointResponse_MatchingAPI_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

keypointResponse::~keypointResponse() {
  // @@protoc_insertion_point(destructor:MatchingApi.keypointResponse)
  SharedDtor();
}

void keypointResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void keypointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const keypointResponse& keypointResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_keypointResponse_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void keypointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.keypointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.Clear();
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* keypointResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<keypointResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .MatchingApi.keyPoint keypoints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.keypointResponse.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool keypointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.keypointResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingApi.keyPoint keypoints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.keypointResponse.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.keypointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.keypointResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void keypointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.keypointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.keyPoint keypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keypoints(static_cast<int>(i)),
      output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.keypointResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.keypointResponse)
}

::google::protobuf::uint8* keypointResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.keypointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.keyPoint keypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keypoints(static_cast<int>(i)), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.keypointResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.keypointResponse)
  return target;
}

size_t keypointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.keypointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.keyPoint keypoints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints(static_cast<int>(i)));
    }
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void keypointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.keypointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const keypointResponse* source =
      ::google::protobuf::DynamicCastToGenerated<keypointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.keypointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.keypointResponse)
    MergeFrom(*source);
  }
}

void keypointResponse::MergeFrom(const keypointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.keypointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoints_.MergeFrom(from.keypoints_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void keypointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.keypointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keypointResponse::CopyFrom(const keypointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.keypointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keypointResponse::IsInitialized() const {
  return true;
}

void keypointResponse::Swap(keypointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void keypointResponse::InternalSwap(keypointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&keypoints_)->InternalSwap(CastToBase(&other->keypoints_));
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata keypointResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void oneDescriptor::InitAsDefaultInstance() {
}
class oneDescriptor::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oneDescriptor::kOnedescFFieldNumber;
const int oneDescriptor::kOnedescUFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oneDescriptor::oneDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.oneDescriptor)
}
oneDescriptor::oneDescriptor(const oneDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      onedescf_(from.onedescf_),
      onedescu_(from.onedescu_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MatchingApi.oneDescriptor)
}

void oneDescriptor::SharedCtor() {
}

oneDescriptor::~oneDescriptor() {
  // @@protoc_insertion_point(destructor:MatchingApi.oneDescriptor)
  SharedDtor();
}

void oneDescriptor::SharedDtor() {
}

void oneDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const oneDescriptor& oneDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_oneDescriptor_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void oneDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.oneDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onedescf_.Clear();
  onedescu_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* oneDescriptor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<oneDescriptor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated float onedescF = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_onedescf();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        do {
          msg->add_onedescf(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 13 && (ptr += 1));
        break;
      }
      // repeated int32 onedescU = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_onedescu();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_onedescu(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool oneDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.oneDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float onedescF = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_onedescf())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_onedescf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 onedescU = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onedescu())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_onedescu())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.oneDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.oneDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void oneDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.oneDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float onedescF = 1;
  if (this->onedescf_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_onedescf_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->onedescf().data(), this->onedescf_size(), output);
  }

  // repeated int32 onedescU = 2;
  if (this->onedescu_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_onedescu_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->onedescu_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->onedescu(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.oneDescriptor)
}

::google::protobuf::uint8* oneDescriptor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.oneDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float onedescF = 1;
  if (this->onedescf_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _onedescf_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->onedescf_, target);
  }

  // repeated int32 onedescU = 2;
  if (this->onedescu_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _onedescu_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->onedescu_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.oneDescriptor)
  return target;
}

size_t oneDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.oneDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float onedescF = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->onedescf_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _onedescf_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 onedescU = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->onedescu_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _onedescu_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void oneDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.oneDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const oneDescriptor* source =
      ::google::protobuf::DynamicCastToGenerated<oneDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.oneDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.oneDescriptor)
    MergeFrom(*source);
  }
}

void oneDescriptor::MergeFrom(const oneDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.oneDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onedescf_.MergeFrom(from.onedescf_);
  onedescu_.MergeFrom(from.onedescu_);
}

void oneDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.oneDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oneDescriptor::CopyFrom(const oneDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.oneDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oneDescriptor::IsInitialized() const {
  return true;
}

void oneDescriptor::Swap(oneDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oneDescriptor::InternalSwap(oneDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  onedescf_.InternalSwap(&other->onedescf_);
  onedescu_.InternalSwap(&other->onedescu_);
}

::google::protobuf::Metadata oneDescriptor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void descriptorRequest::InitAsDefaultInstance() {
}
class descriptorRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int descriptorRequest::kImageFieldNumber;
const int descriptorRequest::kDescriptorNameFieldNumber;
const int descriptorRequest::kDescParametersFieldNumber;
const int descriptorRequest::kDetectorNameFieldNumber;
const int descriptorRequest::kDetParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

descriptorRequest::descriptorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.descriptorRequest)
}
descriptorRequest::descriptorRequest(const descriptorRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_name().size() > 0) {
    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc_parameters().size() > 0) {
    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detector_name().size() > 0) {
    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  det_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.det_parameters().size() > 0) {
    det_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.det_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.descriptorRequest)
}

void descriptorRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_descriptorRequest_MatchingAPI_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

descriptorRequest::~descriptorRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.descriptorRequest)
  SharedDtor();
}

void descriptorRequest::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void descriptorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const descriptorRequest& descriptorRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_descriptorRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void descriptorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.descriptorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* descriptorRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<descriptorRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string descriptor_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorRequest.descriptor_name");
        object = msg->mutable_descriptor_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string desc_parameters = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorRequest.desc_parameters");
        object = msg->mutable_desc_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string detector_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorRequest.detector_name");
        object = msg->mutable_detector_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string det_parameters = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorRequest.det_parameters");
        object = msg->mutable_det_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool descriptorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.descriptorRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string descriptor_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorRequest.descriptor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc_parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorRequest.desc_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detector_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detector_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detector_name().data(), static_cast<int>(this->detector_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorRequest.detector_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string det_parameters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorRequest.det_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.descriptorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.descriptorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void descriptorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.descriptorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // string descriptor_name = 2;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.descriptor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->descriptor_name(), output);
  }

  // string desc_parameters = 3;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.desc_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc_parameters(), output);
  }

  // string detector_name = 4;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.detector_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detector_name(), output);
  }

  // string det_parameters = 5;
  if (this->det_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.det_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->det_parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.descriptorRequest)
}

::google::protobuf::uint8* descriptorRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.descriptorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // string descriptor_name = 2;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.descriptor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->descriptor_name(), target);
  }

  // string desc_parameters = 3;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.desc_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc_parameters(), target);
  }

  // string detector_name = 4;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.detector_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->detector_name(), target);
  }

  // string det_parameters = 5;
  if (this->det_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorRequest.det_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->det_parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.descriptorRequest)
  return target;
}

size_t descriptorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.descriptorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  // string descriptor_name = 2;
  if (this->descriptor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_name());
  }

  // string desc_parameters = 3;
  if (this->desc_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc_parameters());
  }

  // string detector_name = 4;
  if (this->detector_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detector_name());
  }

  // string det_parameters = 5;
  if (this->det_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->det_parameters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void descriptorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.descriptorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const descriptorRequest* source =
      ::google::protobuf::DynamicCastToGenerated<descriptorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.descriptorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.descriptorRequest)
    MergeFrom(*source);
  }
}

void descriptorRequest::MergeFrom(const descriptorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.descriptorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.descriptor_name().size() > 0) {

    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  if (from.desc_parameters().size() > 0) {

    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  if (from.detector_name().size() > 0) {

    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  if (from.det_parameters().size() > 0) {

    det_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.det_parameters_);
  }
}

void descriptorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.descriptorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void descriptorRequest::CopyFrom(const descriptorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.descriptorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool descriptorRequest::IsInitialized() const {
  return true;
}

void descriptorRequest::Swap(descriptorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void descriptorRequest::InternalSwap(descriptorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  descriptor_name_.Swap(&other->descriptor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_parameters_.Swap(&other->desc_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_name_.Swap(&other->detector_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  det_parameters_.Swap(&other->det_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata descriptorRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void descriptorResponse::InitAsDefaultInstance() {
}
class descriptorResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int descriptorResponse::kFeaturesFieldNumber;
const int descriptorResponse::kKeypointsFieldNumber;
const int descriptorResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

descriptorResponse::descriptorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.descriptorResponse)
}
descriptorResponse::descriptorResponse(const descriptorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      features_(from.features_),
      keypoints_(from.keypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.descriptorResponse)
}

void descriptorResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_descriptorResponse_MatchingAPI_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

descriptorResponse::~descriptorResponse() {
  // @@protoc_insertion_point(destructor:MatchingApi.descriptorResponse)
  SharedDtor();
}

void descriptorResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void descriptorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const descriptorResponse& descriptorResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_descriptorResponse_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void descriptorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.descriptorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  keypoints_.Clear();
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* descriptorResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<descriptorResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .MatchingApi.oneDescriptor features = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::oneDescriptor::_InternalParse;
          object = msg->add_features();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorResponse.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .MatchingApi.keyPoint keypoints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool descriptorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.descriptorResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingApi.oneDescriptor features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorResponse.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.keyPoint keypoints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.descriptorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.descriptorResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void descriptorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.descriptorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.oneDescriptor features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->features(static_cast<int>(i)),
      output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // repeated .MatchingApi.keyPoint keypoints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->keypoints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.descriptorResponse)
}

::google::protobuf::uint8* descriptorResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.descriptorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.oneDescriptor features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->features(static_cast<int>(i)), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // repeated .MatchingApi.keyPoint keypoints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keypoints(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.descriptorResponse)
  return target;
}

size_t descriptorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.descriptorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.oneDescriptor features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->features(static_cast<int>(i)));
    }
  }

  // repeated .MatchingApi.keyPoint keypoints = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints(static_cast<int>(i)));
    }
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void descriptorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.descriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const descriptorResponse* source =
      ::google::protobuf::DynamicCastToGenerated<descriptorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.descriptorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.descriptorResponse)
    MergeFrom(*source);
  }
}

void descriptorResponse::MergeFrom(const descriptorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.descriptorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  keypoints_.MergeFrom(from.keypoints_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void descriptorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.descriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void descriptorResponse::CopyFrom(const descriptorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.descriptorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool descriptorResponse::IsInitialized() const {
  return true;
}

void descriptorResponse::Swap(descriptorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void descriptorResponse::InternalSwap(descriptorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&features_)->InternalSwap(CastToBase(&other->features_));
  CastToBase(&keypoints_)->InternalSwap(CastToBase(&other->keypoints_));
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata descriptorResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void matchingRequest::InitAsDefaultInstance() {
}
class matchingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matchingRequest::kFeaturesFirstFieldNumber;
const int matchingRequest::kFeaturesSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matchingRequest::matchingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.matchingRequest)
}
matchingRequest::matchingRequest(const matchingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      features_first_(from.features_first_),
      features_second_(from.features_second_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MatchingApi.matchingRequest)
}

void matchingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_matchingRequest_MatchingAPI_2eproto.base);
}

matchingRequest::~matchingRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.matchingRequest)
  SharedDtor();
}

void matchingRequest::SharedDtor() {
}

void matchingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matchingRequest& matchingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_matchingRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void matchingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.matchingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_first_.Clear();
  features_second_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* matchingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<matchingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .MatchingApi.oneDescriptor features_first = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::oneDescriptor::_InternalParse;
          object = msg->add_features_first();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .MatchingApi.oneDescriptor features_second = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::oneDescriptor::_InternalParse;
          object = msg->add_features_second();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool matchingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.matchingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingApi.oneDescriptor features_first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_features_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.oneDescriptor features_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_features_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.matchingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.matchingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void matchingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.matchingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.oneDescriptor features_first = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_first_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->features_first(static_cast<int>(i)),
      output);
  }

  // repeated .MatchingApi.oneDescriptor features_second = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_second_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->features_second(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.matchingRequest)
}

::google::protobuf::uint8* matchingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.matchingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.oneDescriptor features_first = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_first_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->features_first(static_cast<int>(i)), target);
  }

  // repeated .MatchingApi.oneDescriptor features_second = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_second_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->features_second(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.matchingRequest)
  return target;
}

size_t matchingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.matchingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.oneDescriptor features_first = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_first_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->features_first(static_cast<int>(i)));
    }
  }

  // repeated .MatchingApi.oneDescriptor features_second = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->features_second_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->features_second(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.matchingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const matchingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<matchingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.matchingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.matchingRequest)
    MergeFrom(*source);
  }
}

void matchingRequest::MergeFrom(const matchingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.matchingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_first_.MergeFrom(from.features_first_);
  features_second_.MergeFrom(from.features_second_);
}

void matchingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.matchingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchingRequest::CopyFrom(const matchingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.matchingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchingRequest::IsInitialized() const {
  return true;
}

void matchingRequest::Swap(matchingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matchingRequest::InternalSwap(matchingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&features_first_)->InternalSwap(CastToBase(&other->features_first_));
  CastToBase(&features_second_)->InternalSwap(CastToBase(&other->features_second_));
}

::google::protobuf::Metadata matchingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void matchedPoint::InitAsDefaultInstance() {
}
class matchedPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matchedPoint::kQueryIdxFieldNumber;
const int matchedPoint::kTrainIdxFieldNumber;
const int matchedPoint::kImgIdxFieldNumber;
const int matchedPoint::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matchedPoint::matchedPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.matchedPoint)
}
matchedPoint::matchedPoint(const matchedPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&queryidx_, &from.queryidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&queryidx_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:MatchingApi.matchedPoint)
}

void matchedPoint::SharedCtor() {
  ::memset(&queryidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&queryidx_)) + sizeof(distance_));
}

matchedPoint::~matchedPoint() {
  // @@protoc_insertion_point(destructor:MatchingApi.matchedPoint)
  SharedDtor();
}

void matchedPoint::SharedDtor() {
}

void matchedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matchedPoint& matchedPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_matchedPoint_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void matchedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.matchedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&queryidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&queryidx_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* matchedPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<matchedPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 queryIdx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_queryidx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 trainIdx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_trainidx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 imgIdx = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_imgidx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float distance = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool matchedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.matchedPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 queryIdx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queryidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trainIdx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trainidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 imgIdx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imgidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.matchedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.matchedPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void matchedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.matchedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryIdx = 1;
  if (this->queryidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queryidx(), output);
  }

  // int32 trainIdx = 2;
  if (this->trainidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trainidx(), output);
  }

  // int32 imgIdx = 3;
  if (this->imgidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imgidx(), output);
  }

  // float distance = 4;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.matchedPoint)
}

::google::protobuf::uint8* matchedPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.matchedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryIdx = 1;
  if (this->queryidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queryidx(), target);
  }

  // int32 trainIdx = 2;
  if (this->trainidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trainidx(), target);
  }

  // int32 imgIdx = 3;
  if (this->imgidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imgidx(), target);
  }

  // float distance = 4;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.matchedPoint)
  return target;
}

size_t matchedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.matchedPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 queryIdx = 1;
  if (this->queryidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queryidx());
  }

  // int32 trainIdx = 2;
  if (this->trainidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trainidx());
  }

  // int32 imgIdx = 3;
  if (this->imgidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imgidx());
  }

  // float distance = 4;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchedPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.matchedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const matchedPoint* source =
      ::google::protobuf::DynamicCastToGenerated<matchedPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.matchedPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.matchedPoint)
    MergeFrom(*source);
  }
}

void matchedPoint::MergeFrom(const matchedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.matchedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queryidx() != 0) {
    set_queryidx(from.queryidx());
  }
  if (from.trainidx() != 0) {
    set_trainidx(from.trainidx());
  }
  if (from.imgidx() != 0) {
    set_imgidx(from.imgidx());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void matchedPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.matchedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchedPoint::CopyFrom(const matchedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.matchedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchedPoint::IsInitialized() const {
  return true;
}

void matchedPoint::Swap(matchedPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matchedPoint::InternalSwap(matchedPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(queryidx_, other->queryidx_);
  swap(trainidx_, other->trainidx_);
  swap(imgidx_, other->imgidx_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata matchedPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void matchingResponse::InitAsDefaultInstance() {
}
class matchingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matchingResponse::kAllMatchesFieldNumber;
const int matchingResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matchingResponse::matchingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.matchingResponse)
}
matchingResponse::matchingResponse(const matchingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      all_matches_(from.all_matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.matchingResponse)
}

void matchingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_matchingResponse_MatchingAPI_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

matchingResponse::~matchingResponse() {
  // @@protoc_insertion_point(destructor:MatchingApi.matchingResponse)
  SharedDtor();
}

void matchingResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void matchingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matchingResponse& matchingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_matchingResponse_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void matchingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.matchingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_matches_.Clear();
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* matchingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<matchingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .MatchingApi.matchedPoint all_matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::matchedPoint::_InternalParse;
          object = msg->add_all_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.matchingResponse.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool matchingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.matchingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingApi.matchedPoint all_matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_all_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.matchingResponse.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.matchingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.matchingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void matchingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.matchingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->all_matches(static_cast<int>(i)),
      output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.matchingResponse)
}

::google::protobuf::uint8* matchingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.matchingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->all_matches(static_cast<int>(i)), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.matchingResponse)
  return target;
}

size_t matchingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.matchingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->all_matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_matches(static_cast<int>(i)));
    }
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.matchingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const matchingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<matchingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.matchingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.matchingResponse)
    MergeFrom(*source);
  }
}

void matchingResponse::MergeFrom(const matchingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.matchingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_matches_.MergeFrom(from.all_matches_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void matchingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.matchingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchingResponse::CopyFrom(const matchingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.matchingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchingResponse::IsInitialized() const {
  return true;
}

void matchingResponse::Swap(matchingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matchingResponse::InternalSwap(matchingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&all_matches_)->InternalSwap(CastToBase(&other->all_matches_));
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata matchingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void descriptorByKpsRequest::InitAsDefaultInstance() {
}
class descriptorByKpsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int descriptorByKpsRequest::kImageFieldNumber;
const int descriptorByKpsRequest::kDescriptorNameFieldNumber;
const int descriptorByKpsRequest::kDescParametersFieldNumber;
const int descriptorByKpsRequest::kKeypointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

descriptorByKpsRequest::descriptorByKpsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.descriptorByKpsRequest)
}
descriptorByKpsRequest::descriptorByKpsRequest(const descriptorByKpsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keypoints_(from.keypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_name().size() > 0) {
    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc_parameters().size() > 0) {
    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.descriptorByKpsRequest)
}

void descriptorByKpsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_descriptorByKpsRequest_MatchingAPI_2eproto.base);
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

descriptorByKpsRequest::~descriptorByKpsRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.descriptorByKpsRequest)
  SharedDtor();
}

void descriptorByKpsRequest::SharedDtor() {
  descriptor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void descriptorByKpsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const descriptorByKpsRequest& descriptorByKpsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_descriptorByKpsRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void descriptorByKpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.descriptorByKpsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.Clear();
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* descriptorByKpsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<descriptorByKpsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string descriptor_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorByKpsRequest.descriptor_name");
        object = msg->mutable_descriptor_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string desc_parameters = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.descriptorByKpsRequest.desc_parameters");
        object = msg->mutable_desc_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .MatchingApi.keyPoint keypoints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // bytes image = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool descriptorByKpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.descriptorByKpsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string descriptor_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorByKpsRequest.descriptor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc_parameters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.descriptorByKpsRequest.desc_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.keyPoint keypoints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.descriptorByKpsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.descriptorByKpsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void descriptorByKpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.descriptorByKpsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_name = 1;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorByKpsRequest.descriptor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->descriptor_name(), output);
  }

  // string desc_parameters = 2;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorByKpsRequest.desc_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc_parameters(), output);
  }

  // repeated .MatchingApi.keyPoint keypoints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->keypoints(static_cast<int>(i)),
      output);
  }

  // bytes image = 4;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.descriptorByKpsRequest)
}

::google::protobuf::uint8* descriptorByKpsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.descriptorByKpsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_name = 1;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorByKpsRequest.descriptor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->descriptor_name(), target);
  }

  // string desc_parameters = 2;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.descriptorByKpsRequest.desc_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc_parameters(), target);
  }

  // repeated .MatchingApi.keyPoint keypoints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keypoints(static_cast<int>(i)), target);
  }

  // bytes image = 4;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.descriptorByKpsRequest)
  return target;
}

size_t descriptorByKpsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.descriptorByKpsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.keyPoint keypoints = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints(static_cast<int>(i)));
    }
  }

  // string descriptor_name = 1;
  if (this->descriptor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_name());
  }

  // string desc_parameters = 2;
  if (this->desc_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc_parameters());
  }

  // bytes image = 4;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void descriptorByKpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.descriptorByKpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const descriptorByKpsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<descriptorByKpsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.descriptorByKpsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.descriptorByKpsRequest)
    MergeFrom(*source);
  }
}

void descriptorByKpsRequest::MergeFrom(const descriptorByKpsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.descriptorByKpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoints_.MergeFrom(from.keypoints_);
  if (from.descriptor_name().size() > 0) {

    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  if (from.desc_parameters().size() > 0) {

    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void descriptorByKpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.descriptorByKpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void descriptorByKpsRequest::CopyFrom(const descriptorByKpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.descriptorByKpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool descriptorByKpsRequest::IsInitialized() const {
  return true;
}

void descriptorByKpsRequest::Swap(descriptorByKpsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void descriptorByKpsRequest::InternalSwap(descriptorByKpsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&keypoints_)->InternalSwap(CastToBase(&other->keypoints_));
  descriptor_name_.Swap(&other->descriptor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_parameters_.Swap(&other->desc_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata descriptorByKpsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void matchingByImageRequest::InitAsDefaultInstance() {
}
class matchingByImageRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matchingByImageRequest::kImageFirstFieldNumber;
const int matchingByImageRequest::kImageSecondFieldNumber;
const int matchingByImageRequest::kDescriptorNameFieldNumber;
const int matchingByImageRequest::kDescParametersFieldNumber;
const int matchingByImageRequest::kDetectorNameFieldNumber;
const int matchingByImageRequest::kDetParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matchingByImageRequest::matchingByImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.matchingByImageRequest)
}
matchingByImageRequest::matchingByImageRequest(const matchingByImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_first().size() > 0) {
    image_first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_first_);
  }
  image_second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_second().size() > 0) {
    image_second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_second_);
  }
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_name().size() > 0) {
    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc_parameters().size() > 0) {
    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detector_name().size() > 0) {
    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  det_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.det_parameters().size() > 0) {
    det_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.det_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.matchingByImageRequest)
}

void matchingByImageRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_matchingByImageRequest_MatchingAPI_2eproto.base);
  image_first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

matchingByImageRequest::~matchingByImageRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.matchingByImageRequest)
  SharedDtor();
}

void matchingByImageRequest::SharedDtor() {
  image_first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_second_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void matchingByImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matchingByImageRequest& matchingByImageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_matchingByImageRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void matchingByImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.matchingByImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* matchingByImageRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<matchingByImageRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes image_first = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image_first();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes image_second = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image_second();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string descriptor_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.matchingByImageRequest.descriptor_name");
        object = msg->mutable_descriptor_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string desc_parameters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.matchingByImageRequest.desc_parameters");
        object = msg->mutable_desc_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string detector_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.matchingByImageRequest.detector_name");
        object = msg->mutable_detector_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string det_parameters = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.matchingByImageRequest.det_parameters");
        object = msg->mutable_det_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool matchingByImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.matchingByImageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image_first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string descriptor_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.matchingByImageRequest.descriptor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc_parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.matchingByImageRequest.desc_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detector_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detector_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detector_name().data(), static_cast<int>(this->detector_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.matchingByImageRequest.detector_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string det_parameters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.matchingByImageRequest.det_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.matchingByImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.matchingByImageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void matchingByImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.matchingByImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_first = 1;
  if (this->image_first().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image_first(), output);
  }

  // bytes image_second = 2;
  if (this->image_second().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_second(), output);
  }

  // string descriptor_name = 3;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.descriptor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->descriptor_name(), output);
  }

  // string desc_parameters = 4;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.desc_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc_parameters(), output);
  }

  // string detector_name = 5;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.detector_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->detector_name(), output);
  }

  // string det_parameters = 6;
  if (this->det_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.det_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->det_parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.matchingByImageRequest)
}

::google::protobuf::uint8* matchingByImageRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.matchingByImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_first = 1;
  if (this->image_first().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image_first(), target);
  }

  // bytes image_second = 2;
  if (this->image_second().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_second(), target);
  }

  // string descriptor_name = 3;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.descriptor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->descriptor_name(), target);
  }

  // string desc_parameters = 4;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.desc_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_parameters(), target);
  }

  // string detector_name = 5;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.detector_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->detector_name(), target);
  }

  // string det_parameters = 6;
  if (this->det_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageRequest.det_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->det_parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.matchingByImageRequest)
  return target;
}

size_t matchingByImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.matchingByImageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_first = 1;
  if (this->image_first().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_first());
  }

  // bytes image_second = 2;
  if (this->image_second().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_second());
  }

  // string descriptor_name = 3;
  if (this->descriptor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_name());
  }

  // string desc_parameters = 4;
  if (this->desc_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc_parameters());
  }

  // string detector_name = 5;
  if (this->detector_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detector_name());
  }

  // string det_parameters = 6;
  if (this->det_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->det_parameters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchingByImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.matchingByImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const matchingByImageRequest* source =
      ::google::protobuf::DynamicCastToGenerated<matchingByImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.matchingByImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.matchingByImageRequest)
    MergeFrom(*source);
  }
}

void matchingByImageRequest::MergeFrom(const matchingByImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.matchingByImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_first().size() > 0) {

    image_first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_first_);
  }
  if (from.image_second().size() > 0) {

    image_second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_second_);
  }
  if (from.descriptor_name().size() > 0) {

    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  if (from.desc_parameters().size() > 0) {

    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  if (from.detector_name().size() > 0) {

    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  if (from.det_parameters().size() > 0) {

    det_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.det_parameters_);
  }
}

void matchingByImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.matchingByImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchingByImageRequest::CopyFrom(const matchingByImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.matchingByImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchingByImageRequest::IsInitialized() const {
  return true;
}

void matchingByImageRequest::Swap(matchingByImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matchingByImageRequest::InternalSwap(matchingByImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_first_.Swap(&other->image_first_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_second_.Swap(&other->image_second_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  descriptor_name_.Swap(&other->descriptor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_parameters_.Swap(&other->desc_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_name_.Swap(&other->detector_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  det_parameters_.Swap(&other->det_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata matchingByImageRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void matchingByImageResponse::InitAsDefaultInstance() {
}
class matchingByImageResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matchingByImageResponse::kAllMatchesFieldNumber;
const int matchingByImageResponse::kStatusFieldNumber;
const int matchingByImageResponse::kKeypointsFirstFieldNumber;
const int matchingByImageResponse::kKeypointsSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matchingByImageResponse::matchingByImageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.matchingByImageResponse)
}
matchingByImageResponse::matchingByImageResponse(const matchingByImageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      all_matches_(from.all_matches_),
      keypoints_first_(from.keypoints_first_),
      keypoints_second_(from.keypoints_second_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.matchingByImageResponse)
}

void matchingByImageResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_matchingByImageResponse_MatchingAPI_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

matchingByImageResponse::~matchingByImageResponse() {
  // @@protoc_insertion_point(destructor:MatchingApi.matchingByImageResponse)
  SharedDtor();
}

void matchingByImageResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void matchingByImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matchingByImageResponse& matchingByImageResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_matchingByImageResponse_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void matchingByImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.matchingByImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_matches_.Clear();
  keypoints_first_.Clear();
  keypoints_second_.Clear();
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* matchingByImageResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<matchingByImageResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .MatchingApi.matchedPoint all_matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::matchedPoint::_InternalParse;
          object = msg->add_all_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.matchingByImageResponse.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .MatchingApi.keyPoint keypoints_first = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints_first();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .MatchingApi.keyPoint keypoints_second = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints_second();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool matchingByImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.matchingByImageResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingApi.matchedPoint all_matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_all_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.matchingByImageResponse.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.keyPoint keypoints_first = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.keyPoint keypoints_second = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.matchingByImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.matchingByImageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void matchingByImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.matchingByImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->all_matches(static_cast<int>(i)),
      output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_first_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->keypoints_first(static_cast<int>(i)),
      output);
  }

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_second_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->keypoints_second(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.matchingByImageResponse)
}

::google::protobuf::uint8* matchingByImageResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.matchingByImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->all_matches(static_cast<int>(i)), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.matchingByImageResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_first_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keypoints_first(static_cast<int>(i)), target);
  }

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_second_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->keypoints_second(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.matchingByImageResponse)
  return target;
}

size_t matchingByImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.matchingByImageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->all_matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_matches(static_cast<int>(i)));
    }
  }

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_first_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints_first(static_cast<int>(i)));
    }
  }

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_second_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints_second(static_cast<int>(i)));
    }
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchingByImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.matchingByImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const matchingByImageResponse* source =
      ::google::protobuf::DynamicCastToGenerated<matchingByImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.matchingByImageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.matchingByImageResponse)
    MergeFrom(*source);
  }
}

void matchingByImageResponse::MergeFrom(const matchingByImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.matchingByImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_matches_.MergeFrom(from.all_matches_);
  keypoints_first_.MergeFrom(from.keypoints_first_);
  keypoints_second_.MergeFrom(from.keypoints_second_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void matchingByImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.matchingByImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchingByImageResponse::CopyFrom(const matchingByImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.matchingByImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchingByImageResponse::IsInitialized() const {
  return true;
}

void matchingByImageResponse::Swap(matchingByImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matchingByImageResponse::InternalSwap(matchingByImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&all_matches_)->InternalSwap(CastToBase(&other->all_matches_));
  CastToBase(&keypoints_first_)->InternalSwap(CastToBase(&other->keypoints_first_));
  CastToBase(&keypoints_second_)->InternalSwap(CastToBase(&other->keypoints_second_));
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata matchingByImageResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void transformRequest::InitAsDefaultInstance() {
}
class transformRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transformRequest::kAllMatchesFieldNumber;
const int transformRequest::kTransformTypeFieldNumber;
const int transformRequest::kKeypointsFirstFieldNumber;
const int transformRequest::kKeypointsSecondFieldNumber;
const int transformRequest::kTransformInputParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transformRequest::transformRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.transformRequest)
}
transformRequest::transformRequest(const transformRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      all_matches_(from.all_matches_),
      keypoints_first_(from.keypoints_first_),
      keypoints_second_(from.keypoints_second_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transform_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transform_type().size() > 0) {
    transform_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_type_);
  }
  transform_input_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transform_input_parameters().size() > 0) {
    transform_input_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_input_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.transformRequest)
}

void transformRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_transformRequest_MatchingAPI_2eproto.base);
  transform_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_input_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

transformRequest::~transformRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.transformRequest)
  SharedDtor();
}

void transformRequest::SharedDtor() {
  transform_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_input_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void transformRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transformRequest& transformRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_transformRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void transformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.transformRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_matches_.Clear();
  keypoints_first_.Clear();
  keypoints_second_.Clear();
  transform_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_input_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* transformRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<transformRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .MatchingApi.matchedPoint all_matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::matchedPoint::_InternalParse;
          object = msg->add_all_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string transform_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformRequest.transform_type");
        object = msg->mutable_transform_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .MatchingApi.keyPoint keypoints_first = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints_first();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .MatchingApi.keyPoint keypoints_second = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::MatchingApi::keyPoint::_InternalParse;
          object = msg->add_keypoints_second();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // string transform_input_parameters = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformRequest.transform_input_parameters");
        object = msg->mutable_transform_input_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool transformRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.transformRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingApi.matchedPoint all_matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_all_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transform_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform_type().data(), static_cast<int>(this->transform_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformRequest.transform_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.keyPoint keypoints_first = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchingApi.keyPoint keypoints_second = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keypoints_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transform_input_parameters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform_input_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform_input_parameters().data(), static_cast<int>(this->transform_input_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformRequest.transform_input_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.transformRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.transformRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void transformRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.transformRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->all_matches(static_cast<int>(i)),
      output);
  }

  // string transform_type = 2;
  if (this->transform_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_type().data(), static_cast<int>(this->transform_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformRequest.transform_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transform_type(), output);
  }

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_first_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->keypoints_first(static_cast<int>(i)),
      output);
  }

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_second_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->keypoints_second(static_cast<int>(i)),
      output);
  }

  // string transform_input_parameters = 5;
  if (this->transform_input_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_input_parameters().data(), static_cast<int>(this->transform_input_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformRequest.transform_input_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->transform_input_parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.transformRequest)
}

::google::protobuf::uint8* transformRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.transformRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->all_matches(static_cast<int>(i)), target);
  }

  // string transform_type = 2;
  if (this->transform_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_type().data(), static_cast<int>(this->transform_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformRequest.transform_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transform_type(), target);
  }

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_first_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keypoints_first(static_cast<int>(i)), target);
  }

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoints_second_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->keypoints_second(static_cast<int>(i)), target);
  }

  // string transform_input_parameters = 5;
  if (this->transform_input_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_input_parameters().data(), static_cast<int>(this->transform_input_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformRequest.transform_input_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->transform_input_parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.transformRequest)
  return target;
}

size_t transformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.transformRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->all_matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_matches(static_cast<int>(i)));
    }
  }

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_first_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints_first(static_cast<int>(i)));
    }
  }

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoints_second_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keypoints_second(static_cast<int>(i)));
    }
  }

  // string transform_type = 2;
  if (this->transform_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform_type());
  }

  // string transform_input_parameters = 5;
  if (this->transform_input_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform_input_parameters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transformRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.transformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const transformRequest* source =
      ::google::protobuf::DynamicCastToGenerated<transformRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.transformRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.transformRequest)
    MergeFrom(*source);
  }
}

void transformRequest::MergeFrom(const transformRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.transformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_matches_.MergeFrom(from.all_matches_);
  keypoints_first_.MergeFrom(from.keypoints_first_);
  keypoints_second_.MergeFrom(from.keypoints_second_);
  if (from.transform_type().size() > 0) {

    transform_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_type_);
  }
  if (from.transform_input_parameters().size() > 0) {

    transform_input_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_input_parameters_);
  }
}

void transformRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.transformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transformRequest::CopyFrom(const transformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.transformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transformRequest::IsInitialized() const {
  return true;
}

void transformRequest::Swap(transformRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transformRequest::InternalSwap(transformRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&all_matches_)->InternalSwap(CastToBase(&other->all_matches_));
  CastToBase(&keypoints_first_)->InternalSwap(CastToBase(&other->keypoints_first_));
  CastToBase(&keypoints_second_)->InternalSwap(CastToBase(&other->keypoints_second_));
  transform_type_.Swap(&other->transform_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transform_input_parameters_.Swap(&other->transform_input_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata transformRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void transformResponse::InitAsDefaultInstance() {
}
class transformResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transformResponse::kStatusFieldNumber;
const int transformResponse::kTransformParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transformResponse::transformResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.transformResponse)
}
transformResponse::transformResponse(const transformResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      transform_parameters_(from.transform_parameters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.transformResponse)
}

void transformResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_transformResponse_MatchingAPI_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

transformResponse::~transformResponse() {
  // @@protoc_insertion_point(destructor:MatchingApi.transformResponse)
  SharedDtor();
}

void transformResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void transformResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transformResponse& transformResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_transformResponse_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void transformResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.transformResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_parameters_.Clear();
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* transformResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<transformResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformResponse.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated double transform_parameters = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_transform_parameters();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        do {
          msg->add_transform_parameters(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool transformResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.transformResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformResponse.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double transform_parameters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_transform_parameters())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_transform_parameters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.transformResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.transformResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void transformResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.transformResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // repeated double transform_parameters = 2;
  if (this->transform_parameters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_transform_parameters_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->transform_parameters().data(), this->transform_parameters_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.transformResponse)
}

::google::protobuf::uint8* transformResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.transformResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // repeated double transform_parameters = 2;
  if (this->transform_parameters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _transform_parameters_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->transform_parameters_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.transformResponse)
  return target;
}

size_t transformResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.transformResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double transform_parameters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->transform_parameters_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _transform_parameters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transformResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.transformResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const transformResponse* source =
      ::google::protobuf::DynamicCastToGenerated<transformResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.transformResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.transformResponse)
    MergeFrom(*source);
  }
}

void transformResponse::MergeFrom(const transformResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.transformResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transform_parameters_.MergeFrom(from.transform_parameters_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void transformResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.transformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transformResponse::CopyFrom(const transformResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.transformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transformResponse::IsInitialized() const {
  return true;
}

void transformResponse::Swap(transformResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transformResponse::InternalSwap(transformResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transform_parameters_.InternalSwap(&other->transform_parameters_);
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata transformResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// ===================================================================

void transformByImageRequest::InitAsDefaultInstance() {
}
class transformByImageRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transformByImageRequest::kImageFirstFieldNumber;
const int transformByImageRequest::kImageSecondFieldNumber;
const int transformByImageRequest::kDescriptorNameFieldNumber;
const int transformByImageRequest::kDescParametersFieldNumber;
const int transformByImageRequest::kDetectorNameFieldNumber;
const int transformByImageRequest::kDetParametersFieldNumber;
const int transformByImageRequest::kTransformTypeFieldNumber;
const int transformByImageRequest::kTransformInputParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transformByImageRequest::transformByImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingApi.transformByImageRequest)
}
transformByImageRequest::transformByImageRequest(const transformByImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_first().size() > 0) {
    image_first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_first_);
  }
  image_second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_second().size() > 0) {
    image_second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_second_);
  }
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_name().size() > 0) {
    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc_parameters().size() > 0) {
    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detector_name().size() > 0) {
    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  det_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.det_parameters().size() > 0) {
    det_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.det_parameters_);
  }
  transform_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transform_type().size() > 0) {
    transform_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_type_);
  }
  transform_input_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transform_input_parameters().size() > 0) {
    transform_input_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_input_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:MatchingApi.transformByImageRequest)
}

void transformByImageRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_transformByImageRequest_MatchingAPI_2eproto.base);
  image_first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_input_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

transformByImageRequest::~transformByImageRequest() {
  // @@protoc_insertion_point(destructor:MatchingApi.transformByImageRequest)
  SharedDtor();
}

void transformByImageRequest::SharedDtor() {
  image_first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_second_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_input_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void transformByImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transformByImageRequest& transformByImageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_transformByImageRequest_MatchingAPI_2eproto.base);
  return *internal_default_instance();
}


void transformByImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchingApi.transformByImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_input_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* transformByImageRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<transformByImageRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes image_first = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image_first();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes image_second = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image_second();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string descriptor_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformByImageRequest.descriptor_name");
        object = msg->mutable_descriptor_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string desc_parameters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformByImageRequest.desc_parameters");
        object = msg->mutable_desc_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string detector_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformByImageRequest.detector_name");
        object = msg->mutable_detector_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string det_parameters = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformByImageRequest.det_parameters");
        object = msg->mutable_det_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string transform_type = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformByImageRequest.transform_type");
        object = msg->mutable_transform_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string transform_input_parameters = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MatchingApi.transformByImageRequest.transform_input_parameters");
        object = msg->mutable_transform_input_parameters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool transformByImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingApi.transformByImageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image_first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string descriptor_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformByImageRequest.descriptor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc_parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformByImageRequest.desc_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detector_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detector_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detector_name().data(), static_cast<int>(this->detector_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformByImageRequest.detector_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string det_parameters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformByImageRequest.det_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transform_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform_type().data(), static_cast<int>(this->transform_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformByImageRequest.transform_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transform_input_parameters = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform_input_parameters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform_input_parameters().data(), static_cast<int>(this->transform_input_parameters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchingApi.transformByImageRequest.transform_input_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingApi.transformByImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingApi.transformByImageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void transformByImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingApi.transformByImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_first = 1;
  if (this->image_first().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image_first(), output);
  }

  // bytes image_second = 2;
  if (this->image_second().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_second(), output);
  }

  // string descriptor_name = 3;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.descriptor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->descriptor_name(), output);
  }

  // string desc_parameters = 4;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.desc_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc_parameters(), output);
  }

  // string detector_name = 5;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.detector_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->detector_name(), output);
  }

  // string det_parameters = 6;
  if (this->det_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.det_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->det_parameters(), output);
  }

  // string transform_type = 7;
  if (this->transform_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_type().data(), static_cast<int>(this->transform_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.transform_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->transform_type(), output);
  }

  // string transform_input_parameters = 8;
  if (this->transform_input_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_input_parameters().data(), static_cast<int>(this->transform_input_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.transform_input_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->transform_input_parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingApi.transformByImageRequest)
}

::google::protobuf::uint8* transformByImageRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingApi.transformByImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_first = 1;
  if (this->image_first().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image_first(), target);
  }

  // bytes image_second = 2;
  if (this->image_second().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_second(), target);
  }

  // string descriptor_name = 3;
  if (this->descriptor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_name().data(), static_cast<int>(this->descriptor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.descriptor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->descriptor_name(), target);
  }

  // string desc_parameters = 4;
  if (this->desc_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc_parameters().data(), static_cast<int>(this->desc_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.desc_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_parameters(), target);
  }

  // string detector_name = 5;
  if (this->detector_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detector_name().data(), static_cast<int>(this->detector_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.detector_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->detector_name(), target);
  }

  // string det_parameters = 6;
  if (this->det_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->det_parameters().data(), static_cast<int>(this->det_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.det_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->det_parameters(), target);
  }

  // string transform_type = 7;
  if (this->transform_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_type().data(), static_cast<int>(this->transform_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.transform_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->transform_type(), target);
  }

  // string transform_input_parameters = 8;
  if (this->transform_input_parameters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_input_parameters().data(), static_cast<int>(this->transform_input_parameters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchingApi.transformByImageRequest.transform_input_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->transform_input_parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingApi.transformByImageRequest)
  return target;
}

size_t transformByImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchingApi.transformByImageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_first = 1;
  if (this->image_first().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_first());
  }

  // bytes image_second = 2;
  if (this->image_second().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_second());
  }

  // string descriptor_name = 3;
  if (this->descriptor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_name());
  }

  // string desc_parameters = 4;
  if (this->desc_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc_parameters());
  }

  // string detector_name = 5;
  if (this->detector_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detector_name());
  }

  // string det_parameters = 6;
  if (this->det_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->det_parameters());
  }

  // string transform_type = 7;
  if (this->transform_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform_type());
  }

  // string transform_input_parameters = 8;
  if (this->transform_input_parameters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform_input_parameters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transformByImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchingApi.transformByImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const transformByImageRequest* source =
      ::google::protobuf::DynamicCastToGenerated<transformByImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchingApi.transformByImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchingApi.transformByImageRequest)
    MergeFrom(*source);
  }
}

void transformByImageRequest::MergeFrom(const transformByImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchingApi.transformByImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_first().size() > 0) {

    image_first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_first_);
  }
  if (from.image_second().size() > 0) {

    image_second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_second_);
  }
  if (from.descriptor_name().size() > 0) {

    descriptor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  if (from.desc_parameters().size() > 0) {

    desc_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_parameters_);
  }
  if (from.detector_name().size() > 0) {

    detector_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_name_);
  }
  if (from.det_parameters().size() > 0) {

    det_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.det_parameters_);
  }
  if (from.transform_type().size() > 0) {

    transform_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_type_);
  }
  if (from.transform_input_parameters().size() > 0) {

    transform_input_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_input_parameters_);
  }
}

void transformByImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchingApi.transformByImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transformByImageRequest::CopyFrom(const transformByImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchingApi.transformByImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transformByImageRequest::IsInitialized() const {
  return true;
}

void transformByImageRequest::Swap(transformByImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transformByImageRequest::InternalSwap(transformByImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_first_.Swap(&other->image_first_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_second_.Swap(&other->image_second_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  descriptor_name_.Swap(&other->descriptor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_parameters_.Swap(&other->desc_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_name_.Swap(&other->detector_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  det_parameters_.Swap(&other->det_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transform_type_.Swap(&other->transform_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transform_input_parameters_.Swap(&other->transform_input_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata transformByImageRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MatchingAPI_2eproto);
  return ::file_level_metadata_MatchingAPI_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MatchingApi
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::MatchingApi::keyPoint* Arena::CreateMaybeMessage< ::MatchingApi::keyPoint >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::keyPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::keypointRequest* Arena::CreateMaybeMessage< ::MatchingApi::keypointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::keypointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::keypointResponse* Arena::CreateMaybeMessage< ::MatchingApi::keypointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::keypointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::oneDescriptor* Arena::CreateMaybeMessage< ::MatchingApi::oneDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::oneDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::descriptorRequest* Arena::CreateMaybeMessage< ::MatchingApi::descriptorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::descriptorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::descriptorResponse* Arena::CreateMaybeMessage< ::MatchingApi::descriptorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::descriptorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::matchingRequest* Arena::CreateMaybeMessage< ::MatchingApi::matchingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::matchingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::matchedPoint* Arena::CreateMaybeMessage< ::MatchingApi::matchedPoint >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::matchedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::matchingResponse* Arena::CreateMaybeMessage< ::MatchingApi::matchingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::matchingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::descriptorByKpsRequest* Arena::CreateMaybeMessage< ::MatchingApi::descriptorByKpsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::descriptorByKpsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::matchingByImageRequest* Arena::CreateMaybeMessage< ::MatchingApi::matchingByImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::matchingByImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::matchingByImageResponse* Arena::CreateMaybeMessage< ::MatchingApi::matchingByImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::matchingByImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::transformRequest* Arena::CreateMaybeMessage< ::MatchingApi::transformRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::transformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::transformResponse* Arena::CreateMaybeMessage< ::MatchingApi::transformResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::transformResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchingApi::transformByImageRequest* Arena::CreateMaybeMessage< ::MatchingApi::transformByImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MatchingApi::transformByImageRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
