// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchingAPI.proto

#ifndef PROTOBUF_INCLUDED_MatchingAPI_2eproto
#define PROTOBUF_INCLUDED_MatchingAPI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MatchingAPI_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_MatchingAPI_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_MatchingAPI_2eproto();
namespace MatchingApi {
class descriptorByKpsRequest;
class descriptorByKpsRequestDefaultTypeInternal;
extern descriptorByKpsRequestDefaultTypeInternal _descriptorByKpsRequest_default_instance_;
class descriptorRequest;
class descriptorRequestDefaultTypeInternal;
extern descriptorRequestDefaultTypeInternal _descriptorRequest_default_instance_;
class descriptorResponse;
class descriptorResponseDefaultTypeInternal;
extern descriptorResponseDefaultTypeInternal _descriptorResponse_default_instance_;
class keyPoint;
class keyPointDefaultTypeInternal;
extern keyPointDefaultTypeInternal _keyPoint_default_instance_;
class keypointRequest;
class keypointRequestDefaultTypeInternal;
extern keypointRequestDefaultTypeInternal _keypointRequest_default_instance_;
class keypointResponse;
class keypointResponseDefaultTypeInternal;
extern keypointResponseDefaultTypeInternal _keypointResponse_default_instance_;
class matchedPoint;
class matchedPointDefaultTypeInternal;
extern matchedPointDefaultTypeInternal _matchedPoint_default_instance_;
class matchingByImageRequest;
class matchingByImageRequestDefaultTypeInternal;
extern matchingByImageRequestDefaultTypeInternal _matchingByImageRequest_default_instance_;
class matchingByImageResponse;
class matchingByImageResponseDefaultTypeInternal;
extern matchingByImageResponseDefaultTypeInternal _matchingByImageResponse_default_instance_;
class matchingRequest;
class matchingRequestDefaultTypeInternal;
extern matchingRequestDefaultTypeInternal _matchingRequest_default_instance_;
class matchingResponse;
class matchingResponseDefaultTypeInternal;
extern matchingResponseDefaultTypeInternal _matchingResponse_default_instance_;
class oneDescriptor;
class oneDescriptorDefaultTypeInternal;
extern oneDescriptorDefaultTypeInternal _oneDescriptor_default_instance_;
class transformByImageRequest;
class transformByImageRequestDefaultTypeInternal;
extern transformByImageRequestDefaultTypeInternal _transformByImageRequest_default_instance_;
class transformRequest;
class transformRequestDefaultTypeInternal;
extern transformRequestDefaultTypeInternal _transformRequest_default_instance_;
class transformResponse;
class transformResponseDefaultTypeInternal;
extern transformResponseDefaultTypeInternal _transformResponse_default_instance_;
}  // namespace MatchingApi
namespace google {
namespace protobuf {
template<> ::MatchingApi::descriptorByKpsRequest* Arena::CreateMaybeMessage<::MatchingApi::descriptorByKpsRequest>(Arena*);
template<> ::MatchingApi::descriptorRequest* Arena::CreateMaybeMessage<::MatchingApi::descriptorRequest>(Arena*);
template<> ::MatchingApi::descriptorResponse* Arena::CreateMaybeMessage<::MatchingApi::descriptorResponse>(Arena*);
template<> ::MatchingApi::keyPoint* Arena::CreateMaybeMessage<::MatchingApi::keyPoint>(Arena*);
template<> ::MatchingApi::keypointRequest* Arena::CreateMaybeMessage<::MatchingApi::keypointRequest>(Arena*);
template<> ::MatchingApi::keypointResponse* Arena::CreateMaybeMessage<::MatchingApi::keypointResponse>(Arena*);
template<> ::MatchingApi::matchedPoint* Arena::CreateMaybeMessage<::MatchingApi::matchedPoint>(Arena*);
template<> ::MatchingApi::matchingByImageRequest* Arena::CreateMaybeMessage<::MatchingApi::matchingByImageRequest>(Arena*);
template<> ::MatchingApi::matchingByImageResponse* Arena::CreateMaybeMessage<::MatchingApi::matchingByImageResponse>(Arena*);
template<> ::MatchingApi::matchingRequest* Arena::CreateMaybeMessage<::MatchingApi::matchingRequest>(Arena*);
template<> ::MatchingApi::matchingResponse* Arena::CreateMaybeMessage<::MatchingApi::matchingResponse>(Arena*);
template<> ::MatchingApi::oneDescriptor* Arena::CreateMaybeMessage<::MatchingApi::oneDescriptor>(Arena*);
template<> ::MatchingApi::transformByImageRequest* Arena::CreateMaybeMessage<::MatchingApi::transformByImageRequest>(Arena*);
template<> ::MatchingApi::transformRequest* Arena::CreateMaybeMessage<::MatchingApi::transformRequest>(Arena*);
template<> ::MatchingApi::transformResponse* Arena::CreateMaybeMessage<::MatchingApi::transformResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MatchingApi {

// ===================================================================

class keyPoint :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.keyPoint) */ {
 public:
  keyPoint();
  virtual ~keyPoint();

  keyPoint(const keyPoint& from);

  inline keyPoint& operator=(const keyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  keyPoint(keyPoint&& from) noexcept
    : keyPoint() {
    *this = ::std::move(from);
  }

  inline keyPoint& operator=(keyPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const keyPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const keyPoint* internal_default_instance() {
    return reinterpret_cast<const keyPoint*>(
               &_keyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(keyPoint* other);
  friend void swap(keyPoint& a, keyPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline keyPoint* New() const final {
    return CreateMaybeMessage<keyPoint>(nullptr);
  }

  keyPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<keyPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const keyPoint& from);
  void MergeFrom(const keyPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  float size() const;
  void set_size(float value);

  // float angle = 2;
  void clear_angle();
  static const int kAngleFieldNumber = 2;
  float angle() const;
  void set_angle(float value);

  // float x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // float y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // float response = 5;
  void clear_response();
  static const int kResponseFieldNumber = 5;
  float response() const;
  void set_response(float value);

  // int32 octave = 6;
  void clear_octave();
  static const int kOctaveFieldNumber = 6;
  ::google::protobuf::int32 octave() const;
  void set_octave(::google::protobuf::int32 value);

  // int32 class_id = 7;
  void clear_class_id();
  static const int kClassIdFieldNumber = 7;
  ::google::protobuf::int32 class_id() const;
  void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchingApi.keyPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float size_;
  float angle_;
  float x_;
  float y_;
  float response_;
  ::google::protobuf::int32 octave_;
  ::google::protobuf::int32 class_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class keypointRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.keypointRequest) */ {
 public:
  keypointRequest();
  virtual ~keypointRequest();

  keypointRequest(const keypointRequest& from);

  inline keypointRequest& operator=(const keypointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  keypointRequest(keypointRequest&& from) noexcept
    : keypointRequest() {
    *this = ::std::move(from);
  }

  inline keypointRequest& operator=(keypointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const keypointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const keypointRequest* internal_default_instance() {
    return reinterpret_cast<const keypointRequest*>(
               &_keypointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(keypointRequest* other);
  friend void swap(keypointRequest& a, keypointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline keypointRequest* New() const final {
    return CreateMaybeMessage<keypointRequest>(nullptr);
  }

  keypointRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<keypointRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const keypointRequest& from);
  void MergeFrom(const keypointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keypointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // string detector_name = 2;
  void clear_detector_name();
  static const int kDetectorNameFieldNumber = 2;
  const ::std::string& detector_name() const;
  void set_detector_name(const ::std::string& value);
  #if LANG_CXX11
  void set_detector_name(::std::string&& value);
  #endif
  void set_detector_name(const char* value);
  void set_detector_name(const char* value, size_t size);
  ::std::string* mutable_detector_name();
  ::std::string* release_detector_name();
  void set_allocated_detector_name(::std::string* detector_name);

  // string parameters = 3;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::std::string& parameters() const;
  void set_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_parameters(::std::string&& value);
  #endif
  void set_parameters(const char* value);
  void set_parameters(const char* value, size_t size);
  ::std::string* mutable_parameters();
  ::std::string* release_parameters();
  void set_allocated_parameters(::std::string* parameters);

  // @@protoc_insertion_point(class_scope:MatchingApi.keypointRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr detector_name_;
  ::google::protobuf::internal::ArenaStringPtr parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class keypointResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.keypointResponse) */ {
 public:
  keypointResponse();
  virtual ~keypointResponse();

  keypointResponse(const keypointResponse& from);

  inline keypointResponse& operator=(const keypointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  keypointResponse(keypointResponse&& from) noexcept
    : keypointResponse() {
    *this = ::std::move(from);
  }

  inline keypointResponse& operator=(keypointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const keypointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const keypointResponse* internal_default_instance() {
    return reinterpret_cast<const keypointResponse*>(
               &_keypointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(keypointResponse* other);
  friend void swap(keypointResponse& a, keypointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline keypointResponse* New() const final {
    return CreateMaybeMessage<keypointResponse>(nullptr);
  }

  keypointResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<keypointResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const keypointResponse& from);
  void MergeFrom(const keypointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keypointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.keyPoint keypoints = 1;
  int keypoints_size() const;
  void clear_keypoints();
  static const int kKeypointsFieldNumber = 1;
  ::MatchingApi::keyPoint* mutable_keypoints(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints();
  const ::MatchingApi::keyPoint& keypoints(int index) const;
  ::MatchingApi::keyPoint* add_keypoints();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints() const;

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:MatchingApi.keypointResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class oneDescriptor :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.oneDescriptor) */ {
 public:
  oneDescriptor();
  virtual ~oneDescriptor();

  oneDescriptor(const oneDescriptor& from);

  inline oneDescriptor& operator=(const oneDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  oneDescriptor(oneDescriptor&& from) noexcept
    : oneDescriptor() {
    *this = ::std::move(from);
  }

  inline oneDescriptor& operator=(oneDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const oneDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const oneDescriptor* internal_default_instance() {
    return reinterpret_cast<const oneDescriptor*>(
               &_oneDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(oneDescriptor* other);
  friend void swap(oneDescriptor& a, oneDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline oneDescriptor* New() const final {
    return CreateMaybeMessage<oneDescriptor>(nullptr);
  }

  oneDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<oneDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const oneDescriptor& from);
  void MergeFrom(const oneDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oneDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float onedescF = 1;
  int onedescf_size() const;
  void clear_onedescf();
  static const int kOnedescFFieldNumber = 1;
  float onedescf(int index) const;
  void set_onedescf(int index, float value);
  void add_onedescf(float value);
  const ::google::protobuf::RepeatedField< float >&
      onedescf() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_onedescf();

  // repeated int32 onedescU = 2;
  int onedescu_size() const;
  void clear_onedescu();
  static const int kOnedescUFieldNumber = 2;
  ::google::protobuf::int32 onedescu(int index) const;
  void set_onedescu(int index, ::google::protobuf::int32 value);
  void add_onedescu(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onedescu() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onedescu();

  // @@protoc_insertion_point(class_scope:MatchingApi.oneDescriptor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > onedescf_;
  mutable std::atomic<int> _onedescf_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onedescu_;
  mutable std::atomic<int> _onedescu_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class descriptorRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.descriptorRequest) */ {
 public:
  descriptorRequest();
  virtual ~descriptorRequest();

  descriptorRequest(const descriptorRequest& from);

  inline descriptorRequest& operator=(const descriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  descriptorRequest(descriptorRequest&& from) noexcept
    : descriptorRequest() {
    *this = ::std::move(from);
  }

  inline descriptorRequest& operator=(descriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const descriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const descriptorRequest* internal_default_instance() {
    return reinterpret_cast<const descriptorRequest*>(
               &_descriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(descriptorRequest* other);
  friend void swap(descriptorRequest& a, descriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline descriptorRequest* New() const final {
    return CreateMaybeMessage<descriptorRequest>(nullptr);
  }

  descriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<descriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const descriptorRequest& from);
  void MergeFrom(const descriptorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(descriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // string descriptor_name = 2;
  void clear_descriptor_name();
  static const int kDescriptorNameFieldNumber = 2;
  const ::std::string& descriptor_name() const;
  void set_descriptor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_name(::std::string&& value);
  #endif
  void set_descriptor_name(const char* value);
  void set_descriptor_name(const char* value, size_t size);
  ::std::string* mutable_descriptor_name();
  ::std::string* release_descriptor_name();
  void set_allocated_descriptor_name(::std::string* descriptor_name);

  // string desc_parameters = 3;
  void clear_desc_parameters();
  static const int kDescParametersFieldNumber = 3;
  const ::std::string& desc_parameters() const;
  void set_desc_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_desc_parameters(::std::string&& value);
  #endif
  void set_desc_parameters(const char* value);
  void set_desc_parameters(const char* value, size_t size);
  ::std::string* mutable_desc_parameters();
  ::std::string* release_desc_parameters();
  void set_allocated_desc_parameters(::std::string* desc_parameters);

  // string detector_name = 4;
  void clear_detector_name();
  static const int kDetectorNameFieldNumber = 4;
  const ::std::string& detector_name() const;
  void set_detector_name(const ::std::string& value);
  #if LANG_CXX11
  void set_detector_name(::std::string&& value);
  #endif
  void set_detector_name(const char* value);
  void set_detector_name(const char* value, size_t size);
  ::std::string* mutable_detector_name();
  ::std::string* release_detector_name();
  void set_allocated_detector_name(::std::string* detector_name);

  // string det_parameters = 5;
  void clear_det_parameters();
  static const int kDetParametersFieldNumber = 5;
  const ::std::string& det_parameters() const;
  void set_det_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_det_parameters(::std::string&& value);
  #endif
  void set_det_parameters(const char* value);
  void set_det_parameters(const char* value, size_t size);
  ::std::string* mutable_det_parameters();
  ::std::string* release_det_parameters();
  void set_allocated_det_parameters(::std::string* det_parameters);

  // @@protoc_insertion_point(class_scope:MatchingApi.descriptorRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_name_;
  ::google::protobuf::internal::ArenaStringPtr desc_parameters_;
  ::google::protobuf::internal::ArenaStringPtr detector_name_;
  ::google::protobuf::internal::ArenaStringPtr det_parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class descriptorResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.descriptorResponse) */ {
 public:
  descriptorResponse();
  virtual ~descriptorResponse();

  descriptorResponse(const descriptorResponse& from);

  inline descriptorResponse& operator=(const descriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  descriptorResponse(descriptorResponse&& from) noexcept
    : descriptorResponse() {
    *this = ::std::move(from);
  }

  inline descriptorResponse& operator=(descriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const descriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const descriptorResponse* internal_default_instance() {
    return reinterpret_cast<const descriptorResponse*>(
               &_descriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(descriptorResponse* other);
  friend void swap(descriptorResponse& a, descriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline descriptorResponse* New() const final {
    return CreateMaybeMessage<descriptorResponse>(nullptr);
  }

  descriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<descriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const descriptorResponse& from);
  void MergeFrom(const descriptorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(descriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.oneDescriptor features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  ::MatchingApi::oneDescriptor* mutable_features(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >*
      mutable_features();
  const ::MatchingApi::oneDescriptor& features(int index) const;
  ::MatchingApi::oneDescriptor* add_features();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >&
      features() const;

  // repeated .MatchingApi.keyPoint keypoints = 3;
  int keypoints_size() const;
  void clear_keypoints();
  static const int kKeypointsFieldNumber = 3;
  ::MatchingApi::keyPoint* mutable_keypoints(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints();
  const ::MatchingApi::keyPoint& keypoints(int index) const;
  ::MatchingApi::keyPoint* add_keypoints();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints() const;

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:MatchingApi.descriptorResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor > features_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class matchingRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.matchingRequest) */ {
 public:
  matchingRequest();
  virtual ~matchingRequest();

  matchingRequest(const matchingRequest& from);

  inline matchingRequest& operator=(const matchingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  matchingRequest(matchingRequest&& from) noexcept
    : matchingRequest() {
    *this = ::std::move(from);
  }

  inline matchingRequest& operator=(matchingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const matchingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matchingRequest* internal_default_instance() {
    return reinterpret_cast<const matchingRequest*>(
               &_matchingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(matchingRequest* other);
  friend void swap(matchingRequest& a, matchingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline matchingRequest* New() const final {
    return CreateMaybeMessage<matchingRequest>(nullptr);
  }

  matchingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<matchingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const matchingRequest& from);
  void MergeFrom(const matchingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matchingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.oneDescriptor features_first = 1;
  int features_first_size() const;
  void clear_features_first();
  static const int kFeaturesFirstFieldNumber = 1;
  ::MatchingApi::oneDescriptor* mutable_features_first(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >*
      mutable_features_first();
  const ::MatchingApi::oneDescriptor& features_first(int index) const;
  ::MatchingApi::oneDescriptor* add_features_first();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >&
      features_first() const;

  // repeated .MatchingApi.oneDescriptor features_second = 2;
  int features_second_size() const;
  void clear_features_second();
  static const int kFeaturesSecondFieldNumber = 2;
  ::MatchingApi::oneDescriptor* mutable_features_second(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >*
      mutable_features_second();
  const ::MatchingApi::oneDescriptor& features_second(int index) const;
  ::MatchingApi::oneDescriptor* add_features_second();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >&
      features_second() const;

  // @@protoc_insertion_point(class_scope:MatchingApi.matchingRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor > features_first_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor > features_second_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class matchedPoint :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.matchedPoint) */ {
 public:
  matchedPoint();
  virtual ~matchedPoint();

  matchedPoint(const matchedPoint& from);

  inline matchedPoint& operator=(const matchedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  matchedPoint(matchedPoint&& from) noexcept
    : matchedPoint() {
    *this = ::std::move(from);
  }

  inline matchedPoint& operator=(matchedPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const matchedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matchedPoint* internal_default_instance() {
    return reinterpret_cast<const matchedPoint*>(
               &_matchedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(matchedPoint* other);
  friend void swap(matchedPoint& a, matchedPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline matchedPoint* New() const final {
    return CreateMaybeMessage<matchedPoint>(nullptr);
  }

  matchedPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<matchedPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const matchedPoint& from);
  void MergeFrom(const matchedPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matchedPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 queryIdx = 1;
  void clear_queryidx();
  static const int kQueryIdxFieldNumber = 1;
  ::google::protobuf::int32 queryidx() const;
  void set_queryidx(::google::protobuf::int32 value);

  // int32 trainIdx = 2;
  void clear_trainidx();
  static const int kTrainIdxFieldNumber = 2;
  ::google::protobuf::int32 trainidx() const;
  void set_trainidx(::google::protobuf::int32 value);

  // int32 imgIdx = 3;
  void clear_imgidx();
  static const int kImgIdxFieldNumber = 3;
  ::google::protobuf::int32 imgidx() const;
  void set_imgidx(::google::protobuf::int32 value);

  // float distance = 4;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:MatchingApi.matchedPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 queryidx_;
  ::google::protobuf::int32 trainidx_;
  ::google::protobuf::int32 imgidx_;
  float distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class matchingResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.matchingResponse) */ {
 public:
  matchingResponse();
  virtual ~matchingResponse();

  matchingResponse(const matchingResponse& from);

  inline matchingResponse& operator=(const matchingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  matchingResponse(matchingResponse&& from) noexcept
    : matchingResponse() {
    *this = ::std::move(from);
  }

  inline matchingResponse& operator=(matchingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const matchingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matchingResponse* internal_default_instance() {
    return reinterpret_cast<const matchingResponse*>(
               &_matchingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(matchingResponse* other);
  friend void swap(matchingResponse& a, matchingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline matchingResponse* New() const final {
    return CreateMaybeMessage<matchingResponse>(nullptr);
  }

  matchingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<matchingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const matchingResponse& from);
  void MergeFrom(const matchingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matchingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  int all_matches_size() const;
  void clear_all_matches();
  static const int kAllMatchesFieldNumber = 1;
  ::MatchingApi::matchedPoint* mutable_all_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >*
      mutable_all_matches();
  const ::MatchingApi::matchedPoint& all_matches(int index) const;
  ::MatchingApi::matchedPoint* add_all_matches();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >&
      all_matches() const;

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:MatchingApi.matchingResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint > all_matches_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class descriptorByKpsRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.descriptorByKpsRequest) */ {
 public:
  descriptorByKpsRequest();
  virtual ~descriptorByKpsRequest();

  descriptorByKpsRequest(const descriptorByKpsRequest& from);

  inline descriptorByKpsRequest& operator=(const descriptorByKpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  descriptorByKpsRequest(descriptorByKpsRequest&& from) noexcept
    : descriptorByKpsRequest() {
    *this = ::std::move(from);
  }

  inline descriptorByKpsRequest& operator=(descriptorByKpsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const descriptorByKpsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const descriptorByKpsRequest* internal_default_instance() {
    return reinterpret_cast<const descriptorByKpsRequest*>(
               &_descriptorByKpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(descriptorByKpsRequest* other);
  friend void swap(descriptorByKpsRequest& a, descriptorByKpsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline descriptorByKpsRequest* New() const final {
    return CreateMaybeMessage<descriptorByKpsRequest>(nullptr);
  }

  descriptorByKpsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<descriptorByKpsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const descriptorByKpsRequest& from);
  void MergeFrom(const descriptorByKpsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(descriptorByKpsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.keyPoint keypoints = 3;
  int keypoints_size() const;
  void clear_keypoints();
  static const int kKeypointsFieldNumber = 3;
  ::MatchingApi::keyPoint* mutable_keypoints(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints();
  const ::MatchingApi::keyPoint& keypoints(int index) const;
  ::MatchingApi::keyPoint* add_keypoints();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints() const;

  // string descriptor_name = 1;
  void clear_descriptor_name();
  static const int kDescriptorNameFieldNumber = 1;
  const ::std::string& descriptor_name() const;
  void set_descriptor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_name(::std::string&& value);
  #endif
  void set_descriptor_name(const char* value);
  void set_descriptor_name(const char* value, size_t size);
  ::std::string* mutable_descriptor_name();
  ::std::string* release_descriptor_name();
  void set_allocated_descriptor_name(::std::string* descriptor_name);

  // string desc_parameters = 2;
  void clear_desc_parameters();
  static const int kDescParametersFieldNumber = 2;
  const ::std::string& desc_parameters() const;
  void set_desc_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_desc_parameters(::std::string&& value);
  #endif
  void set_desc_parameters(const char* value);
  void set_desc_parameters(const char* value, size_t size);
  ::std::string* mutable_desc_parameters();
  ::std::string* release_desc_parameters();
  void set_allocated_desc_parameters(::std::string* desc_parameters);

  // bytes image = 4;
  void clear_image();
  static const int kImageFieldNumber = 4;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:MatchingApi.descriptorByKpsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_name_;
  ::google::protobuf::internal::ArenaStringPtr desc_parameters_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class matchingByImageRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.matchingByImageRequest) */ {
 public:
  matchingByImageRequest();
  virtual ~matchingByImageRequest();

  matchingByImageRequest(const matchingByImageRequest& from);

  inline matchingByImageRequest& operator=(const matchingByImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  matchingByImageRequest(matchingByImageRequest&& from) noexcept
    : matchingByImageRequest() {
    *this = ::std::move(from);
  }

  inline matchingByImageRequest& operator=(matchingByImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const matchingByImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matchingByImageRequest* internal_default_instance() {
    return reinterpret_cast<const matchingByImageRequest*>(
               &_matchingByImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(matchingByImageRequest* other);
  friend void swap(matchingByImageRequest& a, matchingByImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline matchingByImageRequest* New() const final {
    return CreateMaybeMessage<matchingByImageRequest>(nullptr);
  }

  matchingByImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<matchingByImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const matchingByImageRequest& from);
  void MergeFrom(const matchingByImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matchingByImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image_first = 1;
  void clear_image_first();
  static const int kImageFirstFieldNumber = 1;
  const ::std::string& image_first() const;
  void set_image_first(const ::std::string& value);
  #if LANG_CXX11
  void set_image_first(::std::string&& value);
  #endif
  void set_image_first(const char* value);
  void set_image_first(const void* value, size_t size);
  ::std::string* mutable_image_first();
  ::std::string* release_image_first();
  void set_allocated_image_first(::std::string* image_first);

  // bytes image_second = 2;
  void clear_image_second();
  static const int kImageSecondFieldNumber = 2;
  const ::std::string& image_second() const;
  void set_image_second(const ::std::string& value);
  #if LANG_CXX11
  void set_image_second(::std::string&& value);
  #endif
  void set_image_second(const char* value);
  void set_image_second(const void* value, size_t size);
  ::std::string* mutable_image_second();
  ::std::string* release_image_second();
  void set_allocated_image_second(::std::string* image_second);

  // string descriptor_name = 3;
  void clear_descriptor_name();
  static const int kDescriptorNameFieldNumber = 3;
  const ::std::string& descriptor_name() const;
  void set_descriptor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_name(::std::string&& value);
  #endif
  void set_descriptor_name(const char* value);
  void set_descriptor_name(const char* value, size_t size);
  ::std::string* mutable_descriptor_name();
  ::std::string* release_descriptor_name();
  void set_allocated_descriptor_name(::std::string* descriptor_name);

  // string desc_parameters = 4;
  void clear_desc_parameters();
  static const int kDescParametersFieldNumber = 4;
  const ::std::string& desc_parameters() const;
  void set_desc_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_desc_parameters(::std::string&& value);
  #endif
  void set_desc_parameters(const char* value);
  void set_desc_parameters(const char* value, size_t size);
  ::std::string* mutable_desc_parameters();
  ::std::string* release_desc_parameters();
  void set_allocated_desc_parameters(::std::string* desc_parameters);

  // string detector_name = 5;
  void clear_detector_name();
  static const int kDetectorNameFieldNumber = 5;
  const ::std::string& detector_name() const;
  void set_detector_name(const ::std::string& value);
  #if LANG_CXX11
  void set_detector_name(::std::string&& value);
  #endif
  void set_detector_name(const char* value);
  void set_detector_name(const char* value, size_t size);
  ::std::string* mutable_detector_name();
  ::std::string* release_detector_name();
  void set_allocated_detector_name(::std::string* detector_name);

  // string det_parameters = 6;
  void clear_det_parameters();
  static const int kDetParametersFieldNumber = 6;
  const ::std::string& det_parameters() const;
  void set_det_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_det_parameters(::std::string&& value);
  #endif
  void set_det_parameters(const char* value);
  void set_det_parameters(const char* value, size_t size);
  ::std::string* mutable_det_parameters();
  ::std::string* release_det_parameters();
  void set_allocated_det_parameters(::std::string* det_parameters);

  // @@protoc_insertion_point(class_scope:MatchingApi.matchingByImageRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_first_;
  ::google::protobuf::internal::ArenaStringPtr image_second_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_name_;
  ::google::protobuf::internal::ArenaStringPtr desc_parameters_;
  ::google::protobuf::internal::ArenaStringPtr detector_name_;
  ::google::protobuf::internal::ArenaStringPtr det_parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class matchingByImageResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.matchingByImageResponse) */ {
 public:
  matchingByImageResponse();
  virtual ~matchingByImageResponse();

  matchingByImageResponse(const matchingByImageResponse& from);

  inline matchingByImageResponse& operator=(const matchingByImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  matchingByImageResponse(matchingByImageResponse&& from) noexcept
    : matchingByImageResponse() {
    *this = ::std::move(from);
  }

  inline matchingByImageResponse& operator=(matchingByImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const matchingByImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matchingByImageResponse* internal_default_instance() {
    return reinterpret_cast<const matchingByImageResponse*>(
               &_matchingByImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(matchingByImageResponse* other);
  friend void swap(matchingByImageResponse& a, matchingByImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline matchingByImageResponse* New() const final {
    return CreateMaybeMessage<matchingByImageResponse>(nullptr);
  }

  matchingByImageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<matchingByImageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const matchingByImageResponse& from);
  void MergeFrom(const matchingByImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matchingByImageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  int all_matches_size() const;
  void clear_all_matches();
  static const int kAllMatchesFieldNumber = 1;
  ::MatchingApi::matchedPoint* mutable_all_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >*
      mutable_all_matches();
  const ::MatchingApi::matchedPoint& all_matches(int index) const;
  ::MatchingApi::matchedPoint* add_all_matches();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >&
      all_matches() const;

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  int keypoints_first_size() const;
  void clear_keypoints_first();
  static const int kKeypointsFirstFieldNumber = 3;
  ::MatchingApi::keyPoint* mutable_keypoints_first(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints_first();
  const ::MatchingApi::keyPoint& keypoints_first(int index) const;
  ::MatchingApi::keyPoint* add_keypoints_first();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints_first() const;

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  int keypoints_second_size() const;
  void clear_keypoints_second();
  static const int kKeypointsSecondFieldNumber = 4;
  ::MatchingApi::keyPoint* mutable_keypoints_second(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints_second();
  const ::MatchingApi::keyPoint& keypoints_second(int index) const;
  ::MatchingApi::keyPoint* add_keypoints_second();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints_second() const;

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:MatchingApi.matchingByImageResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint > all_matches_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_first_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_second_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class transformRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.transformRequest) */ {
 public:
  transformRequest();
  virtual ~transformRequest();

  transformRequest(const transformRequest& from);

  inline transformRequest& operator=(const transformRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  transformRequest(transformRequest&& from) noexcept
    : transformRequest() {
    *this = ::std::move(from);
  }

  inline transformRequest& operator=(transformRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const transformRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transformRequest* internal_default_instance() {
    return reinterpret_cast<const transformRequest*>(
               &_transformRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(transformRequest* other);
  friend void swap(transformRequest& a, transformRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline transformRequest* New() const final {
    return CreateMaybeMessage<transformRequest>(nullptr);
  }

  transformRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<transformRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const transformRequest& from);
  void MergeFrom(const transformRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transformRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchingApi.matchedPoint all_matches = 1;
  int all_matches_size() const;
  void clear_all_matches();
  static const int kAllMatchesFieldNumber = 1;
  ::MatchingApi::matchedPoint* mutable_all_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >*
      mutable_all_matches();
  const ::MatchingApi::matchedPoint& all_matches(int index) const;
  ::MatchingApi::matchedPoint* add_all_matches();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >&
      all_matches() const;

  // repeated .MatchingApi.keyPoint keypoints_first = 3;
  int keypoints_first_size() const;
  void clear_keypoints_first();
  static const int kKeypointsFirstFieldNumber = 3;
  ::MatchingApi::keyPoint* mutable_keypoints_first(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints_first();
  const ::MatchingApi::keyPoint& keypoints_first(int index) const;
  ::MatchingApi::keyPoint* add_keypoints_first();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints_first() const;

  // repeated .MatchingApi.keyPoint keypoints_second = 4;
  int keypoints_second_size() const;
  void clear_keypoints_second();
  static const int kKeypointsSecondFieldNumber = 4;
  ::MatchingApi::keyPoint* mutable_keypoints_second(int index);
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
      mutable_keypoints_second();
  const ::MatchingApi::keyPoint& keypoints_second(int index) const;
  ::MatchingApi::keyPoint* add_keypoints_second();
  const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
      keypoints_second() const;

  // string transform_type = 2;
  void clear_transform_type();
  static const int kTransformTypeFieldNumber = 2;
  const ::std::string& transform_type() const;
  void set_transform_type(const ::std::string& value);
  #if LANG_CXX11
  void set_transform_type(::std::string&& value);
  #endif
  void set_transform_type(const char* value);
  void set_transform_type(const char* value, size_t size);
  ::std::string* mutable_transform_type();
  ::std::string* release_transform_type();
  void set_allocated_transform_type(::std::string* transform_type);

  // string transform_input_parameters = 5;
  void clear_transform_input_parameters();
  static const int kTransformInputParametersFieldNumber = 5;
  const ::std::string& transform_input_parameters() const;
  void set_transform_input_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_transform_input_parameters(::std::string&& value);
  #endif
  void set_transform_input_parameters(const char* value);
  void set_transform_input_parameters(const char* value, size_t size);
  ::std::string* mutable_transform_input_parameters();
  ::std::string* release_transform_input_parameters();
  void set_allocated_transform_input_parameters(::std::string* transform_input_parameters);

  // @@protoc_insertion_point(class_scope:MatchingApi.transformRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint > all_matches_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_first_;
  ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint > keypoints_second_;
  ::google::protobuf::internal::ArenaStringPtr transform_type_;
  ::google::protobuf::internal::ArenaStringPtr transform_input_parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class transformResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.transformResponse) */ {
 public:
  transformResponse();
  virtual ~transformResponse();

  transformResponse(const transformResponse& from);

  inline transformResponse& operator=(const transformResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  transformResponse(transformResponse&& from) noexcept
    : transformResponse() {
    *this = ::std::move(from);
  }

  inline transformResponse& operator=(transformResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const transformResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transformResponse* internal_default_instance() {
    return reinterpret_cast<const transformResponse*>(
               &_transformResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(transformResponse* other);
  friend void swap(transformResponse& a, transformResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline transformResponse* New() const final {
    return CreateMaybeMessage<transformResponse>(nullptr);
  }

  transformResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<transformResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const transformResponse& from);
  void MergeFrom(const transformResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transformResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double transform_parameters = 2;
  int transform_parameters_size() const;
  void clear_transform_parameters();
  static const int kTransformParametersFieldNumber = 2;
  double transform_parameters(int index) const;
  void set_transform_parameters(int index, double value);
  void add_transform_parameters(double value);
  const ::google::protobuf::RepeatedField< double >&
      transform_parameters() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_transform_parameters();

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:MatchingApi.transformResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > transform_parameters_;
  mutable std::atomic<int> _transform_parameters_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// -------------------------------------------------------------------

class transformByImageRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchingApi.transformByImageRequest) */ {
 public:
  transformByImageRequest();
  virtual ~transformByImageRequest();

  transformByImageRequest(const transformByImageRequest& from);

  inline transformByImageRequest& operator=(const transformByImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  transformByImageRequest(transformByImageRequest&& from) noexcept
    : transformByImageRequest() {
    *this = ::std::move(from);
  }

  inline transformByImageRequest& operator=(transformByImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const transformByImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transformByImageRequest* internal_default_instance() {
    return reinterpret_cast<const transformByImageRequest*>(
               &_transformByImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(transformByImageRequest* other);
  friend void swap(transformByImageRequest& a, transformByImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline transformByImageRequest* New() const final {
    return CreateMaybeMessage<transformByImageRequest>(nullptr);
  }

  transformByImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<transformByImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const transformByImageRequest& from);
  void MergeFrom(const transformByImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transformByImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image_first = 1;
  void clear_image_first();
  static const int kImageFirstFieldNumber = 1;
  const ::std::string& image_first() const;
  void set_image_first(const ::std::string& value);
  #if LANG_CXX11
  void set_image_first(::std::string&& value);
  #endif
  void set_image_first(const char* value);
  void set_image_first(const void* value, size_t size);
  ::std::string* mutable_image_first();
  ::std::string* release_image_first();
  void set_allocated_image_first(::std::string* image_first);

  // bytes image_second = 2;
  void clear_image_second();
  static const int kImageSecondFieldNumber = 2;
  const ::std::string& image_second() const;
  void set_image_second(const ::std::string& value);
  #if LANG_CXX11
  void set_image_second(::std::string&& value);
  #endif
  void set_image_second(const char* value);
  void set_image_second(const void* value, size_t size);
  ::std::string* mutable_image_second();
  ::std::string* release_image_second();
  void set_allocated_image_second(::std::string* image_second);

  // string descriptor_name = 3;
  void clear_descriptor_name();
  static const int kDescriptorNameFieldNumber = 3;
  const ::std::string& descriptor_name() const;
  void set_descriptor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_name(::std::string&& value);
  #endif
  void set_descriptor_name(const char* value);
  void set_descriptor_name(const char* value, size_t size);
  ::std::string* mutable_descriptor_name();
  ::std::string* release_descriptor_name();
  void set_allocated_descriptor_name(::std::string* descriptor_name);

  // string desc_parameters = 4;
  void clear_desc_parameters();
  static const int kDescParametersFieldNumber = 4;
  const ::std::string& desc_parameters() const;
  void set_desc_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_desc_parameters(::std::string&& value);
  #endif
  void set_desc_parameters(const char* value);
  void set_desc_parameters(const char* value, size_t size);
  ::std::string* mutable_desc_parameters();
  ::std::string* release_desc_parameters();
  void set_allocated_desc_parameters(::std::string* desc_parameters);

  // string detector_name = 5;
  void clear_detector_name();
  static const int kDetectorNameFieldNumber = 5;
  const ::std::string& detector_name() const;
  void set_detector_name(const ::std::string& value);
  #if LANG_CXX11
  void set_detector_name(::std::string&& value);
  #endif
  void set_detector_name(const char* value);
  void set_detector_name(const char* value, size_t size);
  ::std::string* mutable_detector_name();
  ::std::string* release_detector_name();
  void set_allocated_detector_name(::std::string* detector_name);

  // string det_parameters = 6;
  void clear_det_parameters();
  static const int kDetParametersFieldNumber = 6;
  const ::std::string& det_parameters() const;
  void set_det_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_det_parameters(::std::string&& value);
  #endif
  void set_det_parameters(const char* value);
  void set_det_parameters(const char* value, size_t size);
  ::std::string* mutable_det_parameters();
  ::std::string* release_det_parameters();
  void set_allocated_det_parameters(::std::string* det_parameters);

  // string transform_type = 7;
  void clear_transform_type();
  static const int kTransformTypeFieldNumber = 7;
  const ::std::string& transform_type() const;
  void set_transform_type(const ::std::string& value);
  #if LANG_CXX11
  void set_transform_type(::std::string&& value);
  #endif
  void set_transform_type(const char* value);
  void set_transform_type(const char* value, size_t size);
  ::std::string* mutable_transform_type();
  ::std::string* release_transform_type();
  void set_allocated_transform_type(::std::string* transform_type);

  // string transform_input_parameters = 8;
  void clear_transform_input_parameters();
  static const int kTransformInputParametersFieldNumber = 8;
  const ::std::string& transform_input_parameters() const;
  void set_transform_input_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_transform_input_parameters(::std::string&& value);
  #endif
  void set_transform_input_parameters(const char* value);
  void set_transform_input_parameters(const char* value, size_t size);
  ::std::string* mutable_transform_input_parameters();
  ::std::string* release_transform_input_parameters();
  void set_allocated_transform_input_parameters(::std::string* transform_input_parameters);

  // @@protoc_insertion_point(class_scope:MatchingApi.transformByImageRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_first_;
  ::google::protobuf::internal::ArenaStringPtr image_second_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_name_;
  ::google::protobuf::internal::ArenaStringPtr desc_parameters_;
  ::google::protobuf::internal::ArenaStringPtr detector_name_;
  ::google::protobuf::internal::ArenaStringPtr det_parameters_;
  ::google::protobuf::internal::ArenaStringPtr transform_type_;
  ::google::protobuf::internal::ArenaStringPtr transform_input_parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchingAPI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// keyPoint

// float size = 1;
inline void keyPoint::clear_size() {
  size_ = 0;
}
inline float keyPoint::size() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.size)
  return size_;
}
inline void keyPoint::set_size(float value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.size)
}

// float angle = 2;
inline void keyPoint::clear_angle() {
  angle_ = 0;
}
inline float keyPoint::angle() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.angle)
  return angle_;
}
inline void keyPoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.angle)
}

// float x = 3;
inline void keyPoint::clear_x() {
  x_ = 0;
}
inline float keyPoint::x() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.x)
  return x_;
}
inline void keyPoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.x)
}

// float y = 4;
inline void keyPoint::clear_y() {
  y_ = 0;
}
inline float keyPoint::y() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.y)
  return y_;
}
inline void keyPoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.y)
}

// float response = 5;
inline void keyPoint::clear_response() {
  response_ = 0;
}
inline float keyPoint::response() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.response)
  return response_;
}
inline void keyPoint::set_response(float value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.response)
}

// int32 octave = 6;
inline void keyPoint::clear_octave() {
  octave_ = 0;
}
inline ::google::protobuf::int32 keyPoint::octave() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.octave)
  return octave_;
}
inline void keyPoint::set_octave(::google::protobuf::int32 value) {
  
  octave_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.octave)
}

// int32 class_id = 7;
inline void keyPoint::clear_class_id() {
  class_id_ = 0;
}
inline ::google::protobuf::int32 keyPoint::class_id() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keyPoint.class_id)
  return class_id_;
}
inline void keyPoint::set_class_id(::google::protobuf::int32 value) {
  
  class_id_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.keyPoint.class_id)
}

// -------------------------------------------------------------------

// keypointRequest

// bytes image = 1;
inline void keypointRequest::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& keypointRequest::image() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keypointRequest.image)
  return image_.GetNoArena();
}
inline void keypointRequest::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.keypointRequest.image)
}
#if LANG_CXX11
inline void keypointRequest::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.keypointRequest.image)
}
#endif
inline void keypointRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.keypointRequest.image)
}
inline void keypointRequest::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.keypointRequest.image)
}
inline ::std::string* keypointRequest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.keypointRequest.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* keypointRequest::release_image() {
  // @@protoc_insertion_point(field_release:MatchingApi.keypointRequest.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void keypointRequest::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.keypointRequest.image)
}

// string detector_name = 2;
inline void keypointRequest::clear_detector_name() {
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& keypointRequest::detector_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keypointRequest.detector_name)
  return detector_name_.GetNoArena();
}
inline void keypointRequest::set_detector_name(const ::std::string& value) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.keypointRequest.detector_name)
}
#if LANG_CXX11
inline void keypointRequest::set_detector_name(::std::string&& value) {
  
  detector_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.keypointRequest.detector_name)
}
#endif
inline void keypointRequest::set_detector_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.keypointRequest.detector_name)
}
inline void keypointRequest::set_detector_name(const char* value, size_t size) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.keypointRequest.detector_name)
}
inline ::std::string* keypointRequest::mutable_detector_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.keypointRequest.detector_name)
  return detector_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* keypointRequest::release_detector_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.keypointRequest.detector_name)
  
  return detector_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void keypointRequest::set_allocated_detector_name(::std::string* detector_name) {
  if (detector_name != nullptr) {
    
  } else {
    
  }
  detector_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.keypointRequest.detector_name)
}

// string parameters = 3;
inline void keypointRequest::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& keypointRequest::parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keypointRequest.parameters)
  return parameters_.GetNoArena();
}
inline void keypointRequest::set_parameters(const ::std::string& value) {
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.keypointRequest.parameters)
}
#if LANG_CXX11
inline void keypointRequest::set_parameters(::std::string&& value) {
  
  parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.keypointRequest.parameters)
}
#endif
inline void keypointRequest::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.keypointRequest.parameters)
}
inline void keypointRequest::set_parameters(const char* value, size_t size) {
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.keypointRequest.parameters)
}
inline ::std::string* keypointRequest::mutable_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.keypointRequest.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* keypointRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.keypointRequest.parameters)
  
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void keypointRequest::set_allocated_parameters(::std::string* parameters) {
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.keypointRequest.parameters)
}

// -------------------------------------------------------------------

// keypointResponse

// repeated .MatchingApi.keyPoint keypoints = 1;
inline int keypointResponse::keypoints_size() const {
  return keypoints_.size();
}
inline void keypointResponse::clear_keypoints() {
  keypoints_.Clear();
}
inline ::MatchingApi::keyPoint* keypointResponse::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.keypointResponse.keypoints)
  return keypoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
keypointResponse::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.keypointResponse.keypoints)
  return &keypoints_;
}
inline const ::MatchingApi::keyPoint& keypointResponse::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.keypointResponse.keypoints)
  return keypoints_.Get(index);
}
inline ::MatchingApi::keyPoint* keypointResponse::add_keypoints() {
  // @@protoc_insertion_point(field_add:MatchingApi.keypointResponse.keypoints)
  return keypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
keypointResponse::keypoints() const {
  // @@protoc_insertion_point(field_list:MatchingApi.keypointResponse.keypoints)
  return keypoints_;
}

// string status = 2;
inline void keypointResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& keypointResponse::status() const {
  // @@protoc_insertion_point(field_get:MatchingApi.keypointResponse.status)
  return status_.GetNoArena();
}
inline void keypointResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.keypointResponse.status)
}
#if LANG_CXX11
inline void keypointResponse::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.keypointResponse.status)
}
#endif
inline void keypointResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.keypointResponse.status)
}
inline void keypointResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.keypointResponse.status)
}
inline ::std::string* keypointResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.keypointResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* keypointResponse::release_status() {
  // @@protoc_insertion_point(field_release:MatchingApi.keypointResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void keypointResponse::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.keypointResponse.status)
}

// -------------------------------------------------------------------

// oneDescriptor

// repeated float onedescF = 1;
inline int oneDescriptor::onedescf_size() const {
  return onedescf_.size();
}
inline void oneDescriptor::clear_onedescf() {
  onedescf_.Clear();
}
inline float oneDescriptor::onedescf(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.oneDescriptor.onedescF)
  return onedescf_.Get(index);
}
inline void oneDescriptor::set_onedescf(int index, float value) {
  onedescf_.Set(index, value);
  // @@protoc_insertion_point(field_set:MatchingApi.oneDescriptor.onedescF)
}
inline void oneDescriptor::add_onedescf(float value) {
  onedescf_.Add(value);
  // @@protoc_insertion_point(field_add:MatchingApi.oneDescriptor.onedescF)
}
inline const ::google::protobuf::RepeatedField< float >&
oneDescriptor::onedescf() const {
  // @@protoc_insertion_point(field_list:MatchingApi.oneDescriptor.onedescF)
  return onedescf_;
}
inline ::google::protobuf::RepeatedField< float >*
oneDescriptor::mutable_onedescf() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.oneDescriptor.onedescF)
  return &onedescf_;
}

// repeated int32 onedescU = 2;
inline int oneDescriptor::onedescu_size() const {
  return onedescu_.size();
}
inline void oneDescriptor::clear_onedescu() {
  onedescu_.Clear();
}
inline ::google::protobuf::int32 oneDescriptor::onedescu(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.oneDescriptor.onedescU)
  return onedescu_.Get(index);
}
inline void oneDescriptor::set_onedescu(int index, ::google::protobuf::int32 value) {
  onedescu_.Set(index, value);
  // @@protoc_insertion_point(field_set:MatchingApi.oneDescriptor.onedescU)
}
inline void oneDescriptor::add_onedescu(::google::protobuf::int32 value) {
  onedescu_.Add(value);
  // @@protoc_insertion_point(field_add:MatchingApi.oneDescriptor.onedescU)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
oneDescriptor::onedescu() const {
  // @@protoc_insertion_point(field_list:MatchingApi.oneDescriptor.onedescU)
  return onedescu_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
oneDescriptor::mutable_onedescu() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.oneDescriptor.onedescU)
  return &onedescu_;
}

// -------------------------------------------------------------------

// descriptorRequest

// bytes image = 1;
inline void descriptorRequest::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorRequest::image() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorRequest.image)
  return image_.GetNoArena();
}
inline void descriptorRequest::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorRequest.image)
}
#if LANG_CXX11
inline void descriptorRequest::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorRequest.image)
}
#endif
inline void descriptorRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorRequest.image)
}
inline void descriptorRequest::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorRequest.image)
}
inline ::std::string* descriptorRequest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorRequest.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorRequest::release_image() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorRequest.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorRequest::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorRequest.image)
}

// string descriptor_name = 2;
inline void descriptorRequest::clear_descriptor_name() {
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorRequest::descriptor_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorRequest.descriptor_name)
  return descriptor_name_.GetNoArena();
}
inline void descriptorRequest::set_descriptor_name(const ::std::string& value) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorRequest.descriptor_name)
}
#if LANG_CXX11
inline void descriptorRequest::set_descriptor_name(::std::string&& value) {
  
  descriptor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorRequest.descriptor_name)
}
#endif
inline void descriptorRequest::set_descriptor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorRequest.descriptor_name)
}
inline void descriptorRequest::set_descriptor_name(const char* value, size_t size) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorRequest.descriptor_name)
}
inline ::std::string* descriptorRequest::mutable_descriptor_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorRequest.descriptor_name)
  return descriptor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorRequest::release_descriptor_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorRequest.descriptor_name)
  
  return descriptor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorRequest::set_allocated_descriptor_name(::std::string* descriptor_name) {
  if (descriptor_name != nullptr) {
    
  } else {
    
  }
  descriptor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorRequest.descriptor_name)
}

// string desc_parameters = 3;
inline void descriptorRequest::clear_desc_parameters() {
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorRequest::desc_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorRequest.desc_parameters)
  return desc_parameters_.GetNoArena();
}
inline void descriptorRequest::set_desc_parameters(const ::std::string& value) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorRequest.desc_parameters)
}
#if LANG_CXX11
inline void descriptorRequest::set_desc_parameters(::std::string&& value) {
  
  desc_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorRequest.desc_parameters)
}
#endif
inline void descriptorRequest::set_desc_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorRequest.desc_parameters)
}
inline void descriptorRequest::set_desc_parameters(const char* value, size_t size) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorRequest.desc_parameters)
}
inline ::std::string* descriptorRequest::mutable_desc_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorRequest.desc_parameters)
  return desc_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorRequest::release_desc_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorRequest.desc_parameters)
  
  return desc_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorRequest::set_allocated_desc_parameters(::std::string* desc_parameters) {
  if (desc_parameters != nullptr) {
    
  } else {
    
  }
  desc_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorRequest.desc_parameters)
}

// string detector_name = 4;
inline void descriptorRequest::clear_detector_name() {
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorRequest::detector_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorRequest.detector_name)
  return detector_name_.GetNoArena();
}
inline void descriptorRequest::set_detector_name(const ::std::string& value) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorRequest.detector_name)
}
#if LANG_CXX11
inline void descriptorRequest::set_detector_name(::std::string&& value) {
  
  detector_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorRequest.detector_name)
}
#endif
inline void descriptorRequest::set_detector_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorRequest.detector_name)
}
inline void descriptorRequest::set_detector_name(const char* value, size_t size) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorRequest.detector_name)
}
inline ::std::string* descriptorRequest::mutable_detector_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorRequest.detector_name)
  return detector_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorRequest::release_detector_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorRequest.detector_name)
  
  return detector_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorRequest::set_allocated_detector_name(::std::string* detector_name) {
  if (detector_name != nullptr) {
    
  } else {
    
  }
  detector_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorRequest.detector_name)
}

// string det_parameters = 5;
inline void descriptorRequest::clear_det_parameters() {
  det_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorRequest::det_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorRequest.det_parameters)
  return det_parameters_.GetNoArena();
}
inline void descriptorRequest::set_det_parameters(const ::std::string& value) {
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorRequest.det_parameters)
}
#if LANG_CXX11
inline void descriptorRequest::set_det_parameters(::std::string&& value) {
  
  det_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorRequest.det_parameters)
}
#endif
inline void descriptorRequest::set_det_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorRequest.det_parameters)
}
inline void descriptorRequest::set_det_parameters(const char* value, size_t size) {
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorRequest.det_parameters)
}
inline ::std::string* descriptorRequest::mutable_det_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorRequest.det_parameters)
  return det_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorRequest::release_det_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorRequest.det_parameters)
  
  return det_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorRequest::set_allocated_det_parameters(::std::string* det_parameters) {
  if (det_parameters != nullptr) {
    
  } else {
    
  }
  det_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), det_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorRequest.det_parameters)
}

// -------------------------------------------------------------------

// descriptorResponse

// repeated .MatchingApi.oneDescriptor features = 1;
inline int descriptorResponse::features_size() const {
  return features_.size();
}
inline void descriptorResponse::clear_features() {
  features_.Clear();
}
inline ::MatchingApi::oneDescriptor* descriptorResponse::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorResponse.features)
  return features_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >*
descriptorResponse::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.descriptorResponse.features)
  return &features_;
}
inline const ::MatchingApi::oneDescriptor& descriptorResponse::features(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorResponse.features)
  return features_.Get(index);
}
inline ::MatchingApi::oneDescriptor* descriptorResponse::add_features() {
  // @@protoc_insertion_point(field_add:MatchingApi.descriptorResponse.features)
  return features_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >&
descriptorResponse::features() const {
  // @@protoc_insertion_point(field_list:MatchingApi.descriptorResponse.features)
  return features_;
}

// repeated .MatchingApi.keyPoint keypoints = 3;
inline int descriptorResponse::keypoints_size() const {
  return keypoints_.size();
}
inline void descriptorResponse::clear_keypoints() {
  keypoints_.Clear();
}
inline ::MatchingApi::keyPoint* descriptorResponse::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorResponse.keypoints)
  return keypoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
descriptorResponse::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.descriptorResponse.keypoints)
  return &keypoints_;
}
inline const ::MatchingApi::keyPoint& descriptorResponse::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorResponse.keypoints)
  return keypoints_.Get(index);
}
inline ::MatchingApi::keyPoint* descriptorResponse::add_keypoints() {
  // @@protoc_insertion_point(field_add:MatchingApi.descriptorResponse.keypoints)
  return keypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
descriptorResponse::keypoints() const {
  // @@protoc_insertion_point(field_list:MatchingApi.descriptorResponse.keypoints)
  return keypoints_;
}

// string status = 2;
inline void descriptorResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorResponse::status() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorResponse.status)
  return status_.GetNoArena();
}
inline void descriptorResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorResponse.status)
}
#if LANG_CXX11
inline void descriptorResponse::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorResponse.status)
}
#endif
inline void descriptorResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorResponse.status)
}
inline void descriptorResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorResponse.status)
}
inline ::std::string* descriptorResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorResponse::release_status() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorResponse::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorResponse.status)
}

// -------------------------------------------------------------------

// matchingRequest

// repeated .MatchingApi.oneDescriptor features_first = 1;
inline int matchingRequest::features_first_size() const {
  return features_first_.size();
}
inline void matchingRequest::clear_features_first() {
  features_first_.Clear();
}
inline ::MatchingApi::oneDescriptor* matchingRequest::mutable_features_first(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingRequest.features_first)
  return features_first_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >*
matchingRequest::mutable_features_first() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.matchingRequest.features_first)
  return &features_first_;
}
inline const ::MatchingApi::oneDescriptor& matchingRequest::features_first(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingRequest.features_first)
  return features_first_.Get(index);
}
inline ::MatchingApi::oneDescriptor* matchingRequest::add_features_first() {
  // @@protoc_insertion_point(field_add:MatchingApi.matchingRequest.features_first)
  return features_first_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >&
matchingRequest::features_first() const {
  // @@protoc_insertion_point(field_list:MatchingApi.matchingRequest.features_first)
  return features_first_;
}

// repeated .MatchingApi.oneDescriptor features_second = 2;
inline int matchingRequest::features_second_size() const {
  return features_second_.size();
}
inline void matchingRequest::clear_features_second() {
  features_second_.Clear();
}
inline ::MatchingApi::oneDescriptor* matchingRequest::mutable_features_second(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingRequest.features_second)
  return features_second_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >*
matchingRequest::mutable_features_second() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.matchingRequest.features_second)
  return &features_second_;
}
inline const ::MatchingApi::oneDescriptor& matchingRequest::features_second(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingRequest.features_second)
  return features_second_.Get(index);
}
inline ::MatchingApi::oneDescriptor* matchingRequest::add_features_second() {
  // @@protoc_insertion_point(field_add:MatchingApi.matchingRequest.features_second)
  return features_second_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::oneDescriptor >&
matchingRequest::features_second() const {
  // @@protoc_insertion_point(field_list:MatchingApi.matchingRequest.features_second)
  return features_second_;
}

// -------------------------------------------------------------------

// matchedPoint

// int32 queryIdx = 1;
inline void matchedPoint::clear_queryidx() {
  queryidx_ = 0;
}
inline ::google::protobuf::int32 matchedPoint::queryidx() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchedPoint.queryIdx)
  return queryidx_;
}
inline void matchedPoint::set_queryidx(::google::protobuf::int32 value) {
  
  queryidx_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.matchedPoint.queryIdx)
}

// int32 trainIdx = 2;
inline void matchedPoint::clear_trainidx() {
  trainidx_ = 0;
}
inline ::google::protobuf::int32 matchedPoint::trainidx() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchedPoint.trainIdx)
  return trainidx_;
}
inline void matchedPoint::set_trainidx(::google::protobuf::int32 value) {
  
  trainidx_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.matchedPoint.trainIdx)
}

// int32 imgIdx = 3;
inline void matchedPoint::clear_imgidx() {
  imgidx_ = 0;
}
inline ::google::protobuf::int32 matchedPoint::imgidx() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchedPoint.imgIdx)
  return imgidx_;
}
inline void matchedPoint::set_imgidx(::google::protobuf::int32 value) {
  
  imgidx_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.matchedPoint.imgIdx)
}

// float distance = 4;
inline void matchedPoint::clear_distance() {
  distance_ = 0;
}
inline float matchedPoint::distance() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchedPoint.distance)
  return distance_;
}
inline void matchedPoint::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:MatchingApi.matchedPoint.distance)
}

// -------------------------------------------------------------------

// matchingResponse

// repeated .MatchingApi.matchedPoint all_matches = 1;
inline int matchingResponse::all_matches_size() const {
  return all_matches_.size();
}
inline void matchingResponse::clear_all_matches() {
  all_matches_.Clear();
}
inline ::MatchingApi::matchedPoint* matchingResponse::mutable_all_matches(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingResponse.all_matches)
  return all_matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >*
matchingResponse::mutable_all_matches() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.matchingResponse.all_matches)
  return &all_matches_;
}
inline const ::MatchingApi::matchedPoint& matchingResponse::all_matches(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingResponse.all_matches)
  return all_matches_.Get(index);
}
inline ::MatchingApi::matchedPoint* matchingResponse::add_all_matches() {
  // @@protoc_insertion_point(field_add:MatchingApi.matchingResponse.all_matches)
  return all_matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >&
matchingResponse::all_matches() const {
  // @@protoc_insertion_point(field_list:MatchingApi.matchingResponse.all_matches)
  return all_matches_;
}

// string status = 2;
inline void matchingResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingResponse::status() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingResponse.status)
  return status_.GetNoArena();
}
inline void matchingResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingResponse.status)
}
#if LANG_CXX11
inline void matchingResponse::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingResponse.status)
}
#endif
inline void matchingResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingResponse.status)
}
inline void matchingResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingResponse.status)
}
inline ::std::string* matchingResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingResponse::release_status() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingResponse::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingResponse.status)
}

// -------------------------------------------------------------------

// descriptorByKpsRequest

// bytes image = 4;
inline void descriptorByKpsRequest::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorByKpsRequest::image() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorByKpsRequest.image)
  return image_.GetNoArena();
}
inline void descriptorByKpsRequest::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorByKpsRequest.image)
}
#if LANG_CXX11
inline void descriptorByKpsRequest::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorByKpsRequest.image)
}
#endif
inline void descriptorByKpsRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorByKpsRequest.image)
}
inline void descriptorByKpsRequest::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorByKpsRequest.image)
}
inline ::std::string* descriptorByKpsRequest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorByKpsRequest.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorByKpsRequest::release_image() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorByKpsRequest.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorByKpsRequest::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorByKpsRequest.image)
}

// string descriptor_name = 1;
inline void descriptorByKpsRequest::clear_descriptor_name() {
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorByKpsRequest::descriptor_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorByKpsRequest.descriptor_name)
  return descriptor_name_.GetNoArena();
}
inline void descriptorByKpsRequest::set_descriptor_name(const ::std::string& value) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorByKpsRequest.descriptor_name)
}
#if LANG_CXX11
inline void descriptorByKpsRequest::set_descriptor_name(::std::string&& value) {
  
  descriptor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorByKpsRequest.descriptor_name)
}
#endif
inline void descriptorByKpsRequest::set_descriptor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorByKpsRequest.descriptor_name)
}
inline void descriptorByKpsRequest::set_descriptor_name(const char* value, size_t size) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorByKpsRequest.descriptor_name)
}
inline ::std::string* descriptorByKpsRequest::mutable_descriptor_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorByKpsRequest.descriptor_name)
  return descriptor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorByKpsRequest::release_descriptor_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorByKpsRequest.descriptor_name)
  
  return descriptor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorByKpsRequest::set_allocated_descriptor_name(::std::string* descriptor_name) {
  if (descriptor_name != nullptr) {
    
  } else {
    
  }
  descriptor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorByKpsRequest.descriptor_name)
}

// string desc_parameters = 2;
inline void descriptorByKpsRequest::clear_desc_parameters() {
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& descriptorByKpsRequest::desc_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorByKpsRequest.desc_parameters)
  return desc_parameters_.GetNoArena();
}
inline void descriptorByKpsRequest::set_desc_parameters(const ::std::string& value) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.descriptorByKpsRequest.desc_parameters)
}
#if LANG_CXX11
inline void descriptorByKpsRequest::set_desc_parameters(::std::string&& value) {
  
  desc_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.descriptorByKpsRequest.desc_parameters)
}
#endif
inline void descriptorByKpsRequest::set_desc_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.descriptorByKpsRequest.desc_parameters)
}
inline void descriptorByKpsRequest::set_desc_parameters(const char* value, size_t size) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.descriptorByKpsRequest.desc_parameters)
}
inline ::std::string* descriptorByKpsRequest::mutable_desc_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorByKpsRequest.desc_parameters)
  return desc_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* descriptorByKpsRequest::release_desc_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.descriptorByKpsRequest.desc_parameters)
  
  return desc_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void descriptorByKpsRequest::set_allocated_desc_parameters(::std::string* desc_parameters) {
  if (desc_parameters != nullptr) {
    
  } else {
    
  }
  desc_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.descriptorByKpsRequest.desc_parameters)
}

// repeated .MatchingApi.keyPoint keypoints = 3;
inline int descriptorByKpsRequest::keypoints_size() const {
  return keypoints_.size();
}
inline void descriptorByKpsRequest::clear_keypoints() {
  keypoints_.Clear();
}
inline ::MatchingApi::keyPoint* descriptorByKpsRequest::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.descriptorByKpsRequest.keypoints)
  return keypoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
descriptorByKpsRequest::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.descriptorByKpsRequest.keypoints)
  return &keypoints_;
}
inline const ::MatchingApi::keyPoint& descriptorByKpsRequest::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.descriptorByKpsRequest.keypoints)
  return keypoints_.Get(index);
}
inline ::MatchingApi::keyPoint* descriptorByKpsRequest::add_keypoints() {
  // @@protoc_insertion_point(field_add:MatchingApi.descriptorByKpsRequest.keypoints)
  return keypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
descriptorByKpsRequest::keypoints() const {
  // @@protoc_insertion_point(field_list:MatchingApi.descriptorByKpsRequest.keypoints)
  return keypoints_;
}

// -------------------------------------------------------------------

// matchingByImageRequest

// bytes image_first = 1;
inline void matchingByImageRequest::clear_image_first() {
  image_first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageRequest::image_first() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageRequest.image_first)
  return image_first_.GetNoArena();
}
inline void matchingByImageRequest::set_image_first(const ::std::string& value) {
  
  image_first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageRequest.image_first)
}
#if LANG_CXX11
inline void matchingByImageRequest::set_image_first(::std::string&& value) {
  
  image_first_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageRequest.image_first)
}
#endif
inline void matchingByImageRequest::set_image_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageRequest.image_first)
}
inline void matchingByImageRequest::set_image_first(const void* value, size_t size) {
  
  image_first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageRequest.image_first)
}
inline ::std::string* matchingByImageRequest::mutable_image_first() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageRequest.image_first)
  return image_first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageRequest::release_image_first() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageRequest.image_first)
  
  return image_first_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageRequest::set_allocated_image_first(::std::string* image_first) {
  if (image_first != nullptr) {
    
  } else {
    
  }
  image_first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_first);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageRequest.image_first)
}

// bytes image_second = 2;
inline void matchingByImageRequest::clear_image_second() {
  image_second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageRequest::image_second() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageRequest.image_second)
  return image_second_.GetNoArena();
}
inline void matchingByImageRequest::set_image_second(const ::std::string& value) {
  
  image_second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageRequest.image_second)
}
#if LANG_CXX11
inline void matchingByImageRequest::set_image_second(::std::string&& value) {
  
  image_second_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageRequest.image_second)
}
#endif
inline void matchingByImageRequest::set_image_second(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageRequest.image_second)
}
inline void matchingByImageRequest::set_image_second(const void* value, size_t size) {
  
  image_second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageRequest.image_second)
}
inline ::std::string* matchingByImageRequest::mutable_image_second() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageRequest.image_second)
  return image_second_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageRequest::release_image_second() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageRequest.image_second)
  
  return image_second_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageRequest::set_allocated_image_second(::std::string* image_second) {
  if (image_second != nullptr) {
    
  } else {
    
  }
  image_second_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_second);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageRequest.image_second)
}

// string descriptor_name = 3;
inline void matchingByImageRequest::clear_descriptor_name() {
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageRequest::descriptor_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageRequest.descriptor_name)
  return descriptor_name_.GetNoArena();
}
inline void matchingByImageRequest::set_descriptor_name(const ::std::string& value) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageRequest.descriptor_name)
}
#if LANG_CXX11
inline void matchingByImageRequest::set_descriptor_name(::std::string&& value) {
  
  descriptor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageRequest.descriptor_name)
}
#endif
inline void matchingByImageRequest::set_descriptor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageRequest.descriptor_name)
}
inline void matchingByImageRequest::set_descriptor_name(const char* value, size_t size) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageRequest.descriptor_name)
}
inline ::std::string* matchingByImageRequest::mutable_descriptor_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageRequest.descriptor_name)
  return descriptor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageRequest::release_descriptor_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageRequest.descriptor_name)
  
  return descriptor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageRequest::set_allocated_descriptor_name(::std::string* descriptor_name) {
  if (descriptor_name != nullptr) {
    
  } else {
    
  }
  descriptor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageRequest.descriptor_name)
}

// string desc_parameters = 4;
inline void matchingByImageRequest::clear_desc_parameters() {
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageRequest::desc_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageRequest.desc_parameters)
  return desc_parameters_.GetNoArena();
}
inline void matchingByImageRequest::set_desc_parameters(const ::std::string& value) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageRequest.desc_parameters)
}
#if LANG_CXX11
inline void matchingByImageRequest::set_desc_parameters(::std::string&& value) {
  
  desc_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageRequest.desc_parameters)
}
#endif
inline void matchingByImageRequest::set_desc_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageRequest.desc_parameters)
}
inline void matchingByImageRequest::set_desc_parameters(const char* value, size_t size) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageRequest.desc_parameters)
}
inline ::std::string* matchingByImageRequest::mutable_desc_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageRequest.desc_parameters)
  return desc_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageRequest::release_desc_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageRequest.desc_parameters)
  
  return desc_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageRequest::set_allocated_desc_parameters(::std::string* desc_parameters) {
  if (desc_parameters != nullptr) {
    
  } else {
    
  }
  desc_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageRequest.desc_parameters)
}

// string detector_name = 5;
inline void matchingByImageRequest::clear_detector_name() {
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageRequest::detector_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageRequest.detector_name)
  return detector_name_.GetNoArena();
}
inline void matchingByImageRequest::set_detector_name(const ::std::string& value) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageRequest.detector_name)
}
#if LANG_CXX11
inline void matchingByImageRequest::set_detector_name(::std::string&& value) {
  
  detector_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageRequest.detector_name)
}
#endif
inline void matchingByImageRequest::set_detector_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageRequest.detector_name)
}
inline void matchingByImageRequest::set_detector_name(const char* value, size_t size) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageRequest.detector_name)
}
inline ::std::string* matchingByImageRequest::mutable_detector_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageRequest.detector_name)
  return detector_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageRequest::release_detector_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageRequest.detector_name)
  
  return detector_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageRequest::set_allocated_detector_name(::std::string* detector_name) {
  if (detector_name != nullptr) {
    
  } else {
    
  }
  detector_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageRequest.detector_name)
}

// string det_parameters = 6;
inline void matchingByImageRequest::clear_det_parameters() {
  det_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageRequest::det_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageRequest.det_parameters)
  return det_parameters_.GetNoArena();
}
inline void matchingByImageRequest::set_det_parameters(const ::std::string& value) {
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageRequest.det_parameters)
}
#if LANG_CXX11
inline void matchingByImageRequest::set_det_parameters(::std::string&& value) {
  
  det_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageRequest.det_parameters)
}
#endif
inline void matchingByImageRequest::set_det_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageRequest.det_parameters)
}
inline void matchingByImageRequest::set_det_parameters(const char* value, size_t size) {
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageRequest.det_parameters)
}
inline ::std::string* matchingByImageRequest::mutable_det_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageRequest.det_parameters)
  return det_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageRequest::release_det_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageRequest.det_parameters)
  
  return det_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageRequest::set_allocated_det_parameters(::std::string* det_parameters) {
  if (det_parameters != nullptr) {
    
  } else {
    
  }
  det_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), det_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageRequest.det_parameters)
}

// -------------------------------------------------------------------

// matchingByImageResponse

// repeated .MatchingApi.matchedPoint all_matches = 1;
inline int matchingByImageResponse::all_matches_size() const {
  return all_matches_.size();
}
inline void matchingByImageResponse::clear_all_matches() {
  all_matches_.Clear();
}
inline ::MatchingApi::matchedPoint* matchingByImageResponse::mutable_all_matches(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageResponse.all_matches)
  return all_matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >*
matchingByImageResponse::mutable_all_matches() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.matchingByImageResponse.all_matches)
  return &all_matches_;
}
inline const ::MatchingApi::matchedPoint& matchingByImageResponse::all_matches(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageResponse.all_matches)
  return all_matches_.Get(index);
}
inline ::MatchingApi::matchedPoint* matchingByImageResponse::add_all_matches() {
  // @@protoc_insertion_point(field_add:MatchingApi.matchingByImageResponse.all_matches)
  return all_matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >&
matchingByImageResponse::all_matches() const {
  // @@protoc_insertion_point(field_list:MatchingApi.matchingByImageResponse.all_matches)
  return all_matches_;
}

// string status = 2;
inline void matchingByImageResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& matchingByImageResponse::status() const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageResponse.status)
  return status_.GetNoArena();
}
inline void matchingByImageResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.matchingByImageResponse.status)
}
#if LANG_CXX11
inline void matchingByImageResponse::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.matchingByImageResponse.status)
}
#endif
inline void matchingByImageResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.matchingByImageResponse.status)
}
inline void matchingByImageResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.matchingByImageResponse.status)
}
inline ::std::string* matchingByImageResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matchingByImageResponse::release_status() {
  // @@protoc_insertion_point(field_release:MatchingApi.matchingByImageResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matchingByImageResponse::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.matchingByImageResponse.status)
}

// repeated .MatchingApi.keyPoint keypoints_first = 3;
inline int matchingByImageResponse::keypoints_first_size() const {
  return keypoints_first_.size();
}
inline void matchingByImageResponse::clear_keypoints_first() {
  keypoints_first_.Clear();
}
inline ::MatchingApi::keyPoint* matchingByImageResponse::mutable_keypoints_first(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageResponse.keypoints_first)
  return keypoints_first_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
matchingByImageResponse::mutable_keypoints_first() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.matchingByImageResponse.keypoints_first)
  return &keypoints_first_;
}
inline const ::MatchingApi::keyPoint& matchingByImageResponse::keypoints_first(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageResponse.keypoints_first)
  return keypoints_first_.Get(index);
}
inline ::MatchingApi::keyPoint* matchingByImageResponse::add_keypoints_first() {
  // @@protoc_insertion_point(field_add:MatchingApi.matchingByImageResponse.keypoints_first)
  return keypoints_first_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
matchingByImageResponse::keypoints_first() const {
  // @@protoc_insertion_point(field_list:MatchingApi.matchingByImageResponse.keypoints_first)
  return keypoints_first_;
}

// repeated .MatchingApi.keyPoint keypoints_second = 4;
inline int matchingByImageResponse::keypoints_second_size() const {
  return keypoints_second_.size();
}
inline void matchingByImageResponse::clear_keypoints_second() {
  keypoints_second_.Clear();
}
inline ::MatchingApi::keyPoint* matchingByImageResponse::mutable_keypoints_second(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.matchingByImageResponse.keypoints_second)
  return keypoints_second_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
matchingByImageResponse::mutable_keypoints_second() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.matchingByImageResponse.keypoints_second)
  return &keypoints_second_;
}
inline const ::MatchingApi::keyPoint& matchingByImageResponse::keypoints_second(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.matchingByImageResponse.keypoints_second)
  return keypoints_second_.Get(index);
}
inline ::MatchingApi::keyPoint* matchingByImageResponse::add_keypoints_second() {
  // @@protoc_insertion_point(field_add:MatchingApi.matchingByImageResponse.keypoints_second)
  return keypoints_second_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
matchingByImageResponse::keypoints_second() const {
  // @@protoc_insertion_point(field_list:MatchingApi.matchingByImageResponse.keypoints_second)
  return keypoints_second_;
}

// -------------------------------------------------------------------

// transformRequest

// repeated .MatchingApi.matchedPoint all_matches = 1;
inline int transformRequest::all_matches_size() const {
  return all_matches_.size();
}
inline void transformRequest::clear_all_matches() {
  all_matches_.Clear();
}
inline ::MatchingApi::matchedPoint* transformRequest::mutable_all_matches(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformRequest.all_matches)
  return all_matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >*
transformRequest::mutable_all_matches() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.transformRequest.all_matches)
  return &all_matches_;
}
inline const ::MatchingApi::matchedPoint& transformRequest::all_matches(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformRequest.all_matches)
  return all_matches_.Get(index);
}
inline ::MatchingApi::matchedPoint* transformRequest::add_all_matches() {
  // @@protoc_insertion_point(field_add:MatchingApi.transformRequest.all_matches)
  return all_matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::matchedPoint >&
transformRequest::all_matches() const {
  // @@protoc_insertion_point(field_list:MatchingApi.transformRequest.all_matches)
  return all_matches_;
}

// string transform_type = 2;
inline void transformRequest::clear_transform_type() {
  transform_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformRequest::transform_type() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformRequest.transform_type)
  return transform_type_.GetNoArena();
}
inline void transformRequest::set_transform_type(const ::std::string& value) {
  
  transform_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformRequest.transform_type)
}
#if LANG_CXX11
inline void transformRequest::set_transform_type(::std::string&& value) {
  
  transform_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformRequest.transform_type)
}
#endif
inline void transformRequest::set_transform_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transform_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformRequest.transform_type)
}
inline void transformRequest::set_transform_type(const char* value, size_t size) {
  
  transform_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformRequest.transform_type)
}
inline ::std::string* transformRequest::mutable_transform_type() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformRequest.transform_type)
  return transform_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformRequest::release_transform_type() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformRequest.transform_type)
  
  return transform_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformRequest::set_allocated_transform_type(::std::string* transform_type) {
  if (transform_type != nullptr) {
    
  } else {
    
  }
  transform_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_type);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformRequest.transform_type)
}

// repeated .MatchingApi.keyPoint keypoints_first = 3;
inline int transformRequest::keypoints_first_size() const {
  return keypoints_first_.size();
}
inline void transformRequest::clear_keypoints_first() {
  keypoints_first_.Clear();
}
inline ::MatchingApi::keyPoint* transformRequest::mutable_keypoints_first(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformRequest.keypoints_first)
  return keypoints_first_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
transformRequest::mutable_keypoints_first() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.transformRequest.keypoints_first)
  return &keypoints_first_;
}
inline const ::MatchingApi::keyPoint& transformRequest::keypoints_first(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformRequest.keypoints_first)
  return keypoints_first_.Get(index);
}
inline ::MatchingApi::keyPoint* transformRequest::add_keypoints_first() {
  // @@protoc_insertion_point(field_add:MatchingApi.transformRequest.keypoints_first)
  return keypoints_first_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
transformRequest::keypoints_first() const {
  // @@protoc_insertion_point(field_list:MatchingApi.transformRequest.keypoints_first)
  return keypoints_first_;
}

// repeated .MatchingApi.keyPoint keypoints_second = 4;
inline int transformRequest::keypoints_second_size() const {
  return keypoints_second_.size();
}
inline void transformRequest::clear_keypoints_second() {
  keypoints_second_.Clear();
}
inline ::MatchingApi::keyPoint* transformRequest::mutable_keypoints_second(int index) {
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformRequest.keypoints_second)
  return keypoints_second_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >*
transformRequest::mutable_keypoints_second() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.transformRequest.keypoints_second)
  return &keypoints_second_;
}
inline const ::MatchingApi::keyPoint& transformRequest::keypoints_second(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformRequest.keypoints_second)
  return keypoints_second_.Get(index);
}
inline ::MatchingApi::keyPoint* transformRequest::add_keypoints_second() {
  // @@protoc_insertion_point(field_add:MatchingApi.transformRequest.keypoints_second)
  return keypoints_second_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchingApi::keyPoint >&
transformRequest::keypoints_second() const {
  // @@protoc_insertion_point(field_list:MatchingApi.transformRequest.keypoints_second)
  return keypoints_second_;
}

// string transform_input_parameters = 5;
inline void transformRequest::clear_transform_input_parameters() {
  transform_input_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformRequest::transform_input_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformRequest.transform_input_parameters)
  return transform_input_parameters_.GetNoArena();
}
inline void transformRequest::set_transform_input_parameters(const ::std::string& value) {
  
  transform_input_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformRequest.transform_input_parameters)
}
#if LANG_CXX11
inline void transformRequest::set_transform_input_parameters(::std::string&& value) {
  
  transform_input_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformRequest.transform_input_parameters)
}
#endif
inline void transformRequest::set_transform_input_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transform_input_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformRequest.transform_input_parameters)
}
inline void transformRequest::set_transform_input_parameters(const char* value, size_t size) {
  
  transform_input_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformRequest.transform_input_parameters)
}
inline ::std::string* transformRequest::mutable_transform_input_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformRequest.transform_input_parameters)
  return transform_input_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformRequest::release_transform_input_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformRequest.transform_input_parameters)
  
  return transform_input_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformRequest::set_allocated_transform_input_parameters(::std::string* transform_input_parameters) {
  if (transform_input_parameters != nullptr) {
    
  } else {
    
  }
  transform_input_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_input_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformRequest.transform_input_parameters)
}

// -------------------------------------------------------------------

// transformResponse

// string status = 1;
inline void transformResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformResponse::status() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformResponse.status)
  return status_.GetNoArena();
}
inline void transformResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformResponse.status)
}
#if LANG_CXX11
inline void transformResponse::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformResponse.status)
}
#endif
inline void transformResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformResponse.status)
}
inline void transformResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformResponse.status)
}
inline ::std::string* transformResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformResponse::release_status() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformResponse::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformResponse.status)
}

// repeated double transform_parameters = 2;
inline int transformResponse::transform_parameters_size() const {
  return transform_parameters_.size();
}
inline void transformResponse::clear_transform_parameters() {
  transform_parameters_.Clear();
}
inline double transformResponse::transform_parameters(int index) const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformResponse.transform_parameters)
  return transform_parameters_.Get(index);
}
inline void transformResponse::set_transform_parameters(int index, double value) {
  transform_parameters_.Set(index, value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformResponse.transform_parameters)
}
inline void transformResponse::add_transform_parameters(double value) {
  transform_parameters_.Add(value);
  // @@protoc_insertion_point(field_add:MatchingApi.transformResponse.transform_parameters)
}
inline const ::google::protobuf::RepeatedField< double >&
transformResponse::transform_parameters() const {
  // @@protoc_insertion_point(field_list:MatchingApi.transformResponse.transform_parameters)
  return transform_parameters_;
}
inline ::google::protobuf::RepeatedField< double >*
transformResponse::mutable_transform_parameters() {
  // @@protoc_insertion_point(field_mutable_list:MatchingApi.transformResponse.transform_parameters)
  return &transform_parameters_;
}

// -------------------------------------------------------------------

// transformByImageRequest

// bytes image_first = 1;
inline void transformByImageRequest::clear_image_first() {
  image_first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::image_first() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.image_first)
  return image_first_.GetNoArena();
}
inline void transformByImageRequest::set_image_first(const ::std::string& value) {
  
  image_first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.image_first)
}
#if LANG_CXX11
inline void transformByImageRequest::set_image_first(::std::string&& value) {
  
  image_first_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.image_first)
}
#endif
inline void transformByImageRequest::set_image_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.image_first)
}
inline void transformByImageRequest::set_image_first(const void* value, size_t size) {
  
  image_first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.image_first)
}
inline ::std::string* transformByImageRequest::mutable_image_first() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.image_first)
  return image_first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_image_first() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.image_first)
  
  return image_first_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_image_first(::std::string* image_first) {
  if (image_first != nullptr) {
    
  } else {
    
  }
  image_first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_first);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.image_first)
}

// bytes image_second = 2;
inline void transformByImageRequest::clear_image_second() {
  image_second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::image_second() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.image_second)
  return image_second_.GetNoArena();
}
inline void transformByImageRequest::set_image_second(const ::std::string& value) {
  
  image_second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.image_second)
}
#if LANG_CXX11
inline void transformByImageRequest::set_image_second(::std::string&& value) {
  
  image_second_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.image_second)
}
#endif
inline void transformByImageRequest::set_image_second(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.image_second)
}
inline void transformByImageRequest::set_image_second(const void* value, size_t size) {
  
  image_second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.image_second)
}
inline ::std::string* transformByImageRequest::mutable_image_second() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.image_second)
  return image_second_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_image_second() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.image_second)
  
  return image_second_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_image_second(::std::string* image_second) {
  if (image_second != nullptr) {
    
  } else {
    
  }
  image_second_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_second);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.image_second)
}

// string descriptor_name = 3;
inline void transformByImageRequest::clear_descriptor_name() {
  descriptor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::descriptor_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.descriptor_name)
  return descriptor_name_.GetNoArena();
}
inline void transformByImageRequest::set_descriptor_name(const ::std::string& value) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.descriptor_name)
}
#if LANG_CXX11
inline void transformByImageRequest::set_descriptor_name(::std::string&& value) {
  
  descriptor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.descriptor_name)
}
#endif
inline void transformByImageRequest::set_descriptor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.descriptor_name)
}
inline void transformByImageRequest::set_descriptor_name(const char* value, size_t size) {
  
  descriptor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.descriptor_name)
}
inline ::std::string* transformByImageRequest::mutable_descriptor_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.descriptor_name)
  return descriptor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_descriptor_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.descriptor_name)
  
  return descriptor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_descriptor_name(::std::string* descriptor_name) {
  if (descriptor_name != nullptr) {
    
  } else {
    
  }
  descriptor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.descriptor_name)
}

// string desc_parameters = 4;
inline void transformByImageRequest::clear_desc_parameters() {
  desc_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::desc_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.desc_parameters)
  return desc_parameters_.GetNoArena();
}
inline void transformByImageRequest::set_desc_parameters(const ::std::string& value) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.desc_parameters)
}
#if LANG_CXX11
inline void transformByImageRequest::set_desc_parameters(::std::string&& value) {
  
  desc_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.desc_parameters)
}
#endif
inline void transformByImageRequest::set_desc_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.desc_parameters)
}
inline void transformByImageRequest::set_desc_parameters(const char* value, size_t size) {
  
  desc_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.desc_parameters)
}
inline ::std::string* transformByImageRequest::mutable_desc_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.desc_parameters)
  return desc_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_desc_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.desc_parameters)
  
  return desc_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_desc_parameters(::std::string* desc_parameters) {
  if (desc_parameters != nullptr) {
    
  } else {
    
  }
  desc_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.desc_parameters)
}

// string detector_name = 5;
inline void transformByImageRequest::clear_detector_name() {
  detector_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::detector_name() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.detector_name)
  return detector_name_.GetNoArena();
}
inline void transformByImageRequest::set_detector_name(const ::std::string& value) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.detector_name)
}
#if LANG_CXX11
inline void transformByImageRequest::set_detector_name(::std::string&& value) {
  
  detector_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.detector_name)
}
#endif
inline void transformByImageRequest::set_detector_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.detector_name)
}
inline void transformByImageRequest::set_detector_name(const char* value, size_t size) {
  
  detector_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.detector_name)
}
inline ::std::string* transformByImageRequest::mutable_detector_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.detector_name)
  return detector_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_detector_name() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.detector_name)
  
  return detector_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_detector_name(::std::string* detector_name) {
  if (detector_name != nullptr) {
    
  } else {
    
  }
  detector_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector_name);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.detector_name)
}

// string det_parameters = 6;
inline void transformByImageRequest::clear_det_parameters() {
  det_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::det_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.det_parameters)
  return det_parameters_.GetNoArena();
}
inline void transformByImageRequest::set_det_parameters(const ::std::string& value) {
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.det_parameters)
}
#if LANG_CXX11
inline void transformByImageRequest::set_det_parameters(::std::string&& value) {
  
  det_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.det_parameters)
}
#endif
inline void transformByImageRequest::set_det_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.det_parameters)
}
inline void transformByImageRequest::set_det_parameters(const char* value, size_t size) {
  
  det_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.det_parameters)
}
inline ::std::string* transformByImageRequest::mutable_det_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.det_parameters)
  return det_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_det_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.det_parameters)
  
  return det_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_det_parameters(::std::string* det_parameters) {
  if (det_parameters != nullptr) {
    
  } else {
    
  }
  det_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), det_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.det_parameters)
}

// string transform_type = 7;
inline void transformByImageRequest::clear_transform_type() {
  transform_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::transform_type() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.transform_type)
  return transform_type_.GetNoArena();
}
inline void transformByImageRequest::set_transform_type(const ::std::string& value) {
  
  transform_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.transform_type)
}
#if LANG_CXX11
inline void transformByImageRequest::set_transform_type(::std::string&& value) {
  
  transform_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.transform_type)
}
#endif
inline void transformByImageRequest::set_transform_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transform_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.transform_type)
}
inline void transformByImageRequest::set_transform_type(const char* value, size_t size) {
  
  transform_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.transform_type)
}
inline ::std::string* transformByImageRequest::mutable_transform_type() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.transform_type)
  return transform_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_transform_type() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.transform_type)
  
  return transform_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_transform_type(::std::string* transform_type) {
  if (transform_type != nullptr) {
    
  } else {
    
  }
  transform_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_type);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.transform_type)
}

// string transform_input_parameters = 8;
inline void transformByImageRequest::clear_transform_input_parameters() {
  transform_input_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& transformByImageRequest::transform_input_parameters() const {
  // @@protoc_insertion_point(field_get:MatchingApi.transformByImageRequest.transform_input_parameters)
  return transform_input_parameters_.GetNoArena();
}
inline void transformByImageRequest::set_transform_input_parameters(const ::std::string& value) {
  
  transform_input_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchingApi.transformByImageRequest.transform_input_parameters)
}
#if LANG_CXX11
inline void transformByImageRequest::set_transform_input_parameters(::std::string&& value) {
  
  transform_input_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchingApi.transformByImageRequest.transform_input_parameters)
}
#endif
inline void transformByImageRequest::set_transform_input_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transform_input_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchingApi.transformByImageRequest.transform_input_parameters)
}
inline void transformByImageRequest::set_transform_input_parameters(const char* value, size_t size) {
  
  transform_input_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchingApi.transformByImageRequest.transform_input_parameters)
}
inline ::std::string* transformByImageRequest::mutable_transform_input_parameters() {
  
  // @@protoc_insertion_point(field_mutable:MatchingApi.transformByImageRequest.transform_input_parameters)
  return transform_input_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformByImageRequest::release_transform_input_parameters() {
  // @@protoc_insertion_point(field_release:MatchingApi.transformByImageRequest.transform_input_parameters)
  
  return transform_input_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformByImageRequest::set_allocated_transform_input_parameters(::std::string* transform_input_parameters) {
  if (transform_input_parameters != nullptr) {
    
  } else {
    
  }
  transform_input_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_input_parameters);
  // @@protoc_insertion_point(field_set_allocated:MatchingApi.transformByImageRequest.transform_input_parameters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MatchingApi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_MatchingAPI_2eproto
